{"version":3,"sources":["images/horizontal_main.png","components/SearchBar.js","my-knolist/Header.js","my-knolist/Sidebar.js","my-knolist/ProjectCard.js","my-knolist/Recent.js","my-knolist/All.js","components/AddButton.js","services/HttpRequest.js","components/NewProjectModal.js","my-knolist/Main.js","my-knolist/Page.js","my-knolist/Settings.js","app/AppHeader.js","components/ConfirmDeletionWindow.js","app/ProjectsList.js","services/StringHelpers.js","app/ProjectsSidebar.js","app/ItemView.js","components/NewItemForm.js","app/NewClusterForm.js","app/AppFooter.js","app/BibWindow.js","app/SharedProject.js","services/RandomGenerator.js","app/minigames/OddOnesOut.js","app/minigames/FindCommonality.js","app/minigames/MakePairs.js","app/MiniGameWindow.js","app/Minigames.js","app/RaiseLevelButton.js","app/ClusterTitle.js","services/isOverlap.js","app/MindMap.js","services/throttle.js","app/App.js","authentication/auth-provider.js","index.js"],"names":["module","exports","SearchBar","props","InputGroup","style","width","Input","placeholder","value","searchQuery","onInput","e","setSearchQuery","target","Button","Icon","icon","Header","logout","useAuth0","showSearch","Navbar","padding","borderBottom","FlexboxGrid","justify","align","to","className","src","horizontalLogo","alt","Item","colspan","Dropdown","title","sortCriterion","activeKey","eventKey","onSelect","setSortCriterion","noCaret","size","placement","componentClass","onClick","localStorage","removeItem","process","returnTo","window","location","origin","Sidebar","first","second","third","useLocation","Sidenav","height","fontFamily","paddingTop","paddingLeft","Body","Nav","active","ProjectCard","openProject","project","setItem","JSON","stringify","description","data","stats","undefined","counts","push","key","toString","average_depth_per_item","date_accessed","date_created","max_depth","most_common","shared_users","length","textDecoration","paddingRight","Panel","shaded","bordered","header","marginTop","collapsible","id","float","Recent","show","projects","marginLeft","marginBottom","allProjects","sort","a","b","Date","parse","recent_access_date","recent","max","i","getFourRecent","map","index","Col","md","All","projectsToDisplay","sharedOnly","archivedOnly","filter","searchResults","toLowerCase","includes","creation_date","localeCompare","filterProjects","fontWeight","fontSize","AddButton","IconButton","appearance","circle","auth0","baseUrl","constructHttpQuery","endpoint","query","filters","finalEndpoint","forEach","entry","method","jsonBody","createAuth0Client","domain","client_id","audience","getTokenSilently","jwt","isChrome","chrome","webstore","runtime","isEdgeChromium","navigator","userAgent","indexOf","sendMessage","response","console","log","url","params","Object","keys","fetch","responseStatus","status","json","responseBody","body","makeHttpRequest","NewProjectModal","setShow","history","useHistory","useState","loading","setLoading","cancel","noCancel","Alert","error","Modal","overflow","onHide","Title","Form","fluid","FormGroup","controlId","ControlLabel","FormControl","name","HelpBlock","rows","Footer","projectTitle","document","getElementById","projectDesc","then","fromSidebar","go","Main","setProjects","gotProjects","setGotProjects","setStats","useEffect","res","showRecent","position","right","bottom","Loader","center","Page","Settings","setActiveKey","Grid","Row","xs","Divider","Toggle","BibButton","Whisper","preventOverflow","trigger","speaker","Tooltip","setShowBib","React","Component","SearchAndFilter","handleCheckAll","checked","nextValue","state","filterCategories","setState","indeterminate","checkAll","sendFilters","handleChange","updateFilters","this","FilterDropdown","renderTitle","Checkbox","onChange","margin","CheckboxGroup","AppHeader","curProject","ConfirmDeletionWindow","backdrop","confirmDelete","resetDelete","color","delete","Project","val","setEditing","editing","cancelEditing","event","relatedTarget","updateProjectNameButtonId","setDeleteProject","stopPropagation","resetDeleteProject","deleteProject","callback","setCurProject","updateProjects","updateProjectName","updatedProjectName","s","l","r","substring","trimString","updatedProjectNameFormId","onSubmit","autoFocus","required","onBlur","defaultValue","ButtonToolbar","isShared","setShowSharedProject","EditProjectNameButton","buttonAction","SharedProjectButton","handleClick","ProjectsList","vertical","NewProjectButton","setShowNewProjectForm","ProjectsSidebar","showNewProjectForm","renderProjectsList","Placeholder","Paragraph","prevProps","prevState","snapshot","Drawer","close","ItemView","setConfirmDelete","setLoadingDelete","loadingDelete","deleteItem","selectedItem","renderNetwork","addNewNote","setAddItemMode","setSelectedItem","generateItemBody","item","typeOfNode","nodeTypes","modalHeaderAndBody","SOURCEANDNOTE","SourceAndNoteView","getSelectedItemDetails","SOURCEANDHIGHLIGHT","SourceAndHighlightView","PURENOTE","PureNoteView","PURESOURCE","PureSourceView","getNodeType","content","SourceTitle","updateTitle","newTitle","newSourceTitleInputId","setEditMode","editMode","marginRight","rel","href","display","EditSourceItemButton","hide","tooltipText","NoteContent","updateContent","newContent","noteContentId","renderContent","NewItemForm","switchShowNewItemForm","addNewItem","newItemUrlId","inputType","newItemNotesId","newItemData","x","y","parentCluster","info","success","showNewItemForm","type","NewClusterForm","switchShowNewClusterForm","addNewCluster","item1_id","newClusterIds","item1","item2_id","item2","newClusterNameId","stationaryClusterItemData","disableEditMode","showNewClusterForm","modalStyle","top","left","AppFooter","newItemButton","fit","warning","BibWindow","getBibSources","showBib","allSourceEndpoint","sortedAllSources","sources","trim","allSources","subSources","curCluster","subSourceEndpoint","sortedSubSources","copyBib","citationArray","getElementsByClassName","selectText","concat","innerHTML","listener","clipboardData","setData","preventDefault","addEventListener","execCommand","removeEventListener","showMissingIcon","source","firstName","lastName","published_date","site_name","access_date","citationFields","missing","changeInclusion","disSources","disIndex","findIndex","allIndex","subIndex","is_included","renderAPADate","date","months","formattedDate","getFullYear","getMonth","getDate","renderChicagoDate","renderMLADate","formatAuthor","renderAPACitation","author","publishDateJS","accessDateJS","isIncludedClassName","renderChicagoCitation","renderMLACitation","formattedPublishDate","formattedAccessDate","maxWidth","renderFormatType","citation","curFormat","formats","APA","CHI","MLA","included","setEditSource","editSource","changeFormatType","renderCitations","defaultChecked","_","FlexboxGridItem","renderBibBody","toggleClusterBib","dropdownData","label","full","SelectPicker","cleanable","searchable","unCheckedChildren","checkedChildren","EditCitationButton","EditWindow","setFormValue","formValue","showField","field","isDatePicker","emptyResponse","saveInfo","publishDate","siteName","accessDate","layout","alignContent","accepter","DatePicker","format","oneTap","Column","Table","HeaderCell","Cell","SharedProject","saveUser","email","userInputId","showSharedProject","fixed","dataKey","randomPicker","array","n","j","Math","floor","random","slice","Line","Progress","OddOnesOut","getRandomItems","items","updateRandomItems","randomItems","chooseItem","numPlayed","selectedItems","numRounds","percent","block","generateDisplayValue","FindCommonality","submitCommon","textarea","commonId","commonality","common","MakePairs","createNodesAndEdges","nodes","edges","container","options","shape","physics","chosen","font","face","background","getComputedStyle","querySelector","widthConstraint","maximum","smooth","hoverWidth","interaction","selectConnectedEdges","hover","hoverConnectedEdges","zoomView","dragView","manipulation","enabled","addEdge","from","addEdgeConnection","network","addEdgeMode","Network","on","canvas","cursor","from_id","to_id","pairCountCurr","pairCount","add","fromLabel","get","toLabel","connections","submitItems","visNodes","visEdges","selectedNode","DataSet","node","x_position","y_position","connection","GameWindow","showGame","setShowGame","selectedGame","MiniGames","randomizer","games","ceil","updateGames","validGames","customProps","clicked","zIndex","RaiseLevelButton","curClusterView","parent_cluster","setCurClusterView","cluster","borderStyle","borderWidth","borderColor","transform","textAlign","userSelect","ClusterTitle","setNewTitle","setCluster","styles","justifyContent","tooltip","onMouseDown","saveNewTitle","isOverlap","rectA","rectB","MindMap","generateVisClusterId","generateClusterIdFromVisId","visClusterId","parseInt","generateVisInClusterId","secondPart","firstPart","generateClusterIdAndNodeIdFromVisInClusterId","visInClusterId","nodeId","isItem","group","isCluster","isItemInCluster","setNonSelectedNodes","nonSelectedNodes","getIds","element","handleClickedNode","find","handleClickedCluster","clusters","handleDragStart","childNodesIds","child_items","clusterTitleId","nodesToMove","clusterCountId","selectNodes","getItems","getClusters","children","child_clusters","child","Promise","all","values","updateItemPosition","itemId","updateClusterPosition","clusterId","fitNetworkToScreen","setShowNewItemHelperMessage","setShowNewClusterHelperMessage","showNewItemHelperMessage","addItem","nodeData","showNewClusterHelperMessage","setShowAddToClusterHelperMessage","showAddToClusterHelperMessage","newItemFormType","addNodeMode","addItemToCluster","moveItemFromClusterToHigherLevel","is_note","types","NULL","getNodeLabel","nodeType","nodeContent","getNodePosition","generateNodePositions","getColor","nodeColors","createNodes","createClusters","groups","selected","hovering","border","inCluster","addNode","func","ms","lastFunc","lastRan","context","args","arguments","clearTimeout","setTimeout","now","apply","throttle","getSelectedNodes","boundingBox","getBoundingBox","otherNodes","getPosition","existingClusterId","raiseLevelButtonHover","showRemoveItemFromClusterMessage","eventData","existingCluster","modes","URL","NOTES","NEITHER","showColor","getItem","project_id","some","clusterNodes","total_items","totalNodes","count","yOffset","Minigames","onMouseOver","onMouseOut","App","setShowNewProjectModal","switchShowProjectsSidebar","showProjectsSidebar","projectId","projectsButton","showNewProjectModal","curProjectKey","withAuthenticationRequired","onRedirecting","KnolistAuthProvider","clientId","redirectUri","onRedirectCallback","appState","pathname","ReactDOM","render","exact","path"],"mappings":"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","file":"static/js/main.55855b86.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/horizontal_main.7429f5ff.png\";","import React from 'react';\r\nimport {Icon, Input, InputGroup} from \"rsuite\";\r\n\r\nfunction SearchBar(props) {\r\n    return (\r\n        <InputGroup style={{width: props.width}}>\r\n            <Input placeholder=\"Search through your project\"\r\n            value={props.searchQuery}\r\n            onInput={e => props.setSearchQuery(e.target.value)}\r\n            />\r\n            <InputGroup.Button>\r\n                <Icon icon=\"search\"/>\r\n            </InputGroup.Button>\r\n        </InputGroup>\r\n    );\r\n}\r\n\r\nexport default SearchBar;","import React from \"react\";\r\nimport horizontalLogo from \"../images/horizontal_main.png\";\r\nimport SearchBar from \"../components/SearchBar.js\";\r\nimport { Navbar, FlexboxGrid, Dropdown, Icon } from \"rsuite\";\r\nimport { useAuth0 } from \"@auth0/auth0-react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\n/*\r\n  Renders header logo, search bar, settings/logout\r\n\r\n  Changes in sorting/search bar changes state in parent component (Page)\r\n*/\r\nfunction Header(props) {\r\n  const { logout } = useAuth0();\r\n\r\n  if (props.showSearch) {\r\n    return (\r\n      <Navbar style={{ padding: \"0 10px\", borderBottom: \".1px solid #ededf0\" }}>\r\n        <FlexboxGrid justify=\"space-between\" align=\"middle\">\r\n          <Link to=\"/my-projects\">\r\n            <Navbar.Header>\r\n              <img className=\"limit-height\" src={horizontalLogo} alt=\"Knolist\" />\r\n            </Navbar.Header>\r\n          </Link>\r\n          <FlexboxGrid.Item colspan={13}>\r\n            <FlexboxGrid>\r\n              <FlexboxGrid.Item><SearchBar width={\"40vw\"} setSearchQuery={props.setSearchQuery} /></FlexboxGrid.Item>\r\n              <FlexboxGrid.Item>\r\n                <Dropdown title={\"Sort by: \" + props.sortCriterion} activeKey={props.sortCriterion}>\r\n                  <Dropdown.Item\r\n                    eventKey=\"Newest\"\r\n                    onSelect={() => props.setSortCriterion(\"Newest\")}>\r\n                    Newest\r\n                </Dropdown.Item>\r\n                  <Dropdown.Item\r\n                    eventKey=\"Oldest\"\r\n                    onSelect={() => props.setSortCriterion(\"Oldest\")}>\r\n                    Oldest\r\n                </Dropdown.Item>\r\n                  <Dropdown.Item\r\n                    eventKey=\"A-Z\"\r\n                    onSelect={() => props.setSortCriterion(\"A-Z\")}>\r\n                    A-Z\r\n                </Dropdown.Item>\r\n                  <Dropdown.Item\r\n                    eventKey=\"Z-A\"\r\n                    onSelect={() => props.setSortCriterion(\"Z-A\")}>\r\n                    Z-A\r\n                </Dropdown.Item>\r\n                </Dropdown>\r\n              </FlexboxGrid.Item>\r\n            </FlexboxGrid>\r\n          </FlexboxGrid.Item>\r\n          <FlexboxGrid.Item>\r\n            <Dropdown noCaret icon={<Icon icon=\"user\" size={\"lg\"} />} placement=\"bottomEnd\">\r\n              <Link to=\"/settings\"><Dropdown.Item componentClass=\"span\" className=\"react-router-styling\">Settings</Dropdown.Item></Link>\r\n              <Dropdown.Item onClick={() => {\r\n                localStorage.removeItem(process.env.REACT_APP_LOCAL_STORAGE_CUR_PROJECT);\r\n                logout({\r\n                  returnTo: window.location.origin,\r\n                });\r\n              }}>Log out</Dropdown.Item>\r\n            </Dropdown>\r\n          </FlexboxGrid.Item>\r\n        </FlexboxGrid>\r\n      </Navbar>\r\n    );\r\n  } else {\r\n    return (\r\n      <Navbar style={{ padding: \"0 10px\", borderBottom: \".1px solid #ededf0\" }}>\r\n        <FlexboxGrid justify=\"space-between\" align=\"middle\">\r\n          <Link to=\"/my-projects\">\r\n            <Navbar.Header>\r\n              <img className=\"limit-height\" src={horizontalLogo} alt=\"Knolist\" />\r\n            </Navbar.Header>\r\n          </Link>\r\n          <FlexboxGrid.Item>\r\n            <Dropdown noCaret icon={<Icon icon=\"user\" size={\"lg\"} />} placement=\"bottomEnd\">\r\n              <Link to=\"/settings\"><Dropdown.Item componentClass=\"span\">Settings</Dropdown.Item></Link>\r\n              <Dropdown.Item onClick={() => {\r\n                logout({\r\n                  returnTo: window.location.origin,\r\n                });\r\n              }}>Log out</Dropdown.Item>\r\n            </Dropdown>\r\n          </FlexboxGrid.Item>\r\n        </FlexboxGrid>\r\n      </Navbar>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;","import React from \"react\";\r\nimport { Sidenav, Icon, Nav } from \"rsuite\";\r\nimport { Link, useLocation } from \"react-router-dom\";\r\n\r\n/*\r\n    Nav.Item has a componentClass property set to span because\r\n    of a warning generated by wrapping <a> within <a>,\r\n    since Link and Nav.Item are transpiled to <a>\r\n*/\r\nfunction Sidebar() {\r\n    let first = false;\r\n    let second = false;\r\n    let third = false;\r\n    const location = useLocation()[\"pathname\"];\r\n\r\n    if (location === \"/my-projects\") first = true;\r\n    else if (location === \"/shared\") second = true;\r\n    else if (location === \"/archived\") third = true;\r\n\r\n    return (\r\n        <div style={{ width: \"17vw\" }}>\r\n            <Sidenav\r\n                style={{ height: \"100vh\", fontFamily: \"Poppins\", paddingTop: \"3vh\", paddingLeft: \"1vh\" }}>\r\n                <Sidenav.Body>\r\n                    <Nav>\r\n                        <Link to=\"/my-projects\" className=\"react-router-styling\">\r\n                            <Nav.Item active={first} icon={<Icon icon=\"project\" />} componentClass=\"span\">\r\n                                My Projects\r\n                            </Nav.Item>\r\n                        </Link>\r\n                        <Link to=\"/shared\" className=\"react-router-styling\">\r\n                            <Nav.Item active={second} icon={<Icon icon=\"people-group\" />} componentClass=\"span\">\r\n                                Shared with me\r\n                            </Nav.Item>\r\n                        </Link>\r\n                        <Link to=\"/archived\" className=\"react-router-styling\">\r\n                            <Nav.Item active={third} icon={<Icon icon=\"archive\" />} componentClass=\"span\">\r\n                                Archived\r\n                            </Nav.Item>\r\n                        </Link>\r\n                    </Nav>\r\n                </Sidenav.Body>\r\n            </Sidenav>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Sidebar;","import React from \"react\";\r\nimport {Panel, Icon} from \"rsuite\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nfunction ProjectCard(props) {\r\n    const openProject = (project) => {\r\n        localStorage.setItem(process.env.REACT_APP_LOCAL_STORAGE_CUR_PROJECT, JSON.stringify(project));\r\n        //set current project to selected project\r\n    }\r\n\r\n\r\n    let description = \"\";\r\n    if (props.data.description != null) description = <p> {props.data.description} </p>;\r\n\r\n    let stats = [];\r\n    if (props.stats !== undefined) {\r\n        if (props.stats.counts['num_items'] !== undefined) {\r\n            stats.push(<p key={'num_items'}> {props.stats.counts['num_items'].toString()} total items </p>)\r\n        }\r\n        if (props.stats.average_depth_per_item !== undefined) {\r\n            stats.push(<p key={'avg_depth'}> Average depth of {props.stats.average_depth_per_item} </p>)\r\n        }\r\n        if (props.stats.date_accessed !== undefined) {\r\n            stats.push(<p key={'date_accessed'}> Last edit was {props.stats.date_accessed}</p>)\r\n        }\r\n        if (props.stats.date_created !== undefined) {\r\n            stats.push(<p key={'date_created'}> Project created on {props.stats.date_created}</p>)\r\n        }\r\n        if (props.stats.max_depth !== undefined) {\r\n            stats.push(<p key={'max_depth'}> Max depth of {props.stats.max_depth}</p>)\r\n        }\r\n        if (props.stats.most_common !== undefined) {\r\n            stats.push(<p key={'most_common'}> Most common item is {props.stats.most_common}</p>)\r\n        }\r\n    }\r\n\r\n\r\n    if (props.data.shared_users.length > 0) {\r\n        return (\r\n            <Link to=\"/\" style={{textDecoration: \"none\", paddingRight: \"5vh\"}} className=\"react-router-styling\">\r\n                <Panel\r\n                    shaded bordered\r\n                    header={props.data.title}\r\n                    style={{marginTop: \"2vh\"}}\r\n                    onClick={() => openProject(props.data)}\r\n                    collapsible>\r\n                    {props.data.id}\r\n                    <Icon icon=\"people-group\" style={{float: \"right\", marginTop: \"5px\"}}/>\r\n\r\n                </Panel>\r\n            </Link>\r\n        );\r\n    } else {\r\n        return (\r\n            <Panel\r\n                shaded bordered\r\n                header={\r\n                    <Link to=\"/\" style={{textDecoration: \"none\", paddingRight: \"5vh\"}} className=\"react-router-styling\">\r\n                        {props.data.title}\r\n                    </Link>\r\n                }\r\n                style={{marginTop: \"2vh\"}}\r\n                onClick={() => openProject(props.data)}\r\n                collapsible>\r\n                {description ? <> <b>Description</b> {description} <br/> </> : null}\r\n                <b> Statistics </b>\r\n                {stats}\r\n            </Panel>\r\n\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default ProjectCard;","import React from \"react\";\r\nimport { FlexboxGrid, Col } from \"rsuite\"\r\nimport ProjectCard from \"./ProjectCard.js\";\r\n\r\nfunction Recent(props) {\r\n  const getFourRecent = (allProjects) => {\r\n    allProjects.sort((a, b) => {\r\n      return Date.parse(b.recent_access_date) - Date.parse(a.recent_access_date);\r\n    });\r\n    let recent = [];\r\n    const max = allProjects.length >= 4 ? 4 : allProjects.length;\r\n    for (let i = 0; i < max; i++) {\r\n      recent.push(allProjects[i]);\r\n    }\r\n    return recent;\r\n  };\r\n\r\n  if (props.show && props.projects.length > 0) {\r\n    return (\r\n      <div>\r\n        <div className=\"myknolist-title\">Recent</div>\r\n        <div className=\"myknolist-container\">\r\n          <FlexboxGrid style={{ marginLeft: \"-6px\", marginBottom: \"5vh\" }} justify=\"start\">\r\n            {getFourRecent(props.projects).map((project, index) => {\r\n              return (\r\n                <FlexboxGrid.Item componentClass={Col} md={6} key={index}>\r\n                  <ProjectCard data={project} stats={props.stats[index]}/>\r\n                </FlexboxGrid.Item>);\r\n            })}\r\n          </FlexboxGrid>\r\n        </div>\r\n      </div>\r\n    );\r\n  } else return null;\r\n}\r\n\r\nexport default Recent;","import React from \"react\";\r\nimport {FlexboxGrid, Col} from \"rsuite\"\r\nimport ProjectCard from \"./ProjectCard.js\";\r\n\r\n/*\r\n    Displays all projects relevant to current page,\r\n    search query, and sorting option\r\n*/\r\nfunction All(props) {\r\n    // filter out irrelevant projects\r\n    const filterProjects = (allProjects) => {\r\n        let projectsToDisplay = null;\r\n        // first check what page we're on to see what kinds of projects to display\r\n        if (!props.sharedOnly && !props.archivedOnly) {\r\n            projectsToDisplay = allProjects;\r\n        } else if (props.sharedOnly) {\r\n            projectsToDisplay = allProjects.filter(project => project.shared_users.length > 0);\r\n        } else if (props.archivedOnly) {\r\n            // archived projects not implemented yet, uncomment below when ready\r\n            // projectsToDisplay = allProjects.filter(project => project.archived === true);\r\n            return [];\r\n        }\r\n        // further filter based on search query, if any (currently only searching project title)\r\n        if (props.searchQuery !== \"\") {\r\n            let searchResults = [];\r\n            for (let i = 0; i < projectsToDisplay.length; i++) {\r\n                if (projectsToDisplay[i].title.toLowerCase().includes(props.searchQuery.toLowerCase())) {\r\n                    searchResults.push(projectsToDisplay[i]);\r\n                }\r\n            }\r\n            projectsToDisplay = searchResults;\r\n        }\r\n        // further filter based on selected sorting option\r\n        switch (props.sortCriterion) {\r\n            case \"Oldest\":\r\n                //sort by creation date (backwards)\r\n                projectsToDisplay.sort((a, b) => {\r\n                    return Date.parse(a.creation_date) - Date.parse(b.creation_date);\r\n                });\r\n                break;\r\n            case \"Newest\":\r\n                //sort by creation date\r\n                projectsToDisplay.sort((a, b) => {\r\n                    return Date.parse(b.creation_date) - Date.parse(a.creation_date);\r\n                });\r\n                break;\r\n            case \"A-Z\":\r\n                projectsToDisplay.sort((a, b) => {\r\n                    return a.title.localeCompare(b.title);\r\n                });\r\n                break;\r\n            case \"Z-A\":\r\n                projectsToDisplay.sort((a, b) => {\r\n                    return b.title.localeCompare(a.title);\r\n                });\r\n                break;\r\n            default:\r\n                break; //do nothing when sortCriterion is empty string\r\n        }\r\n        return projectsToDisplay;\r\n    }\r\n\r\n    const projects = filterProjects(props.projects);\r\n\r\n    if (projects.length > 0) {\r\n        return (\r\n            <div>\r\n                <div className=\"myknolist-title\">All</div>\r\n                <div className=\"myknolist-container\">\r\n                    <FlexboxGrid style={{marginLeft: \"-6px\", marginBottom: \"5vh\"}} justify=\"start\">\r\n                        {projects.map((project, index) => {\r\n                            const stats = props.stats[index];\r\n                            return (\r\n                                <FlexboxGrid.Item componentClass={Col} md={6} key={index}>\r\n                                    <ProjectCard data={project} stats={stats}/>\r\n                                </FlexboxGrid.Item>);\r\n                        })}\r\n                    </FlexboxGrid>\r\n                </div>\r\n            </div>\r\n        );\r\n    } else if (projects.length === 0 && props.searchQuery === \"\") {\r\n        return (\r\n            <div>\r\n                <div style={{fontWeight: \"bold\", fontSize: \"2em\", fontFamily: \"Poppins\"}}>No projects!</div>\r\n                <div style={{fontSize: \"1em\", fontFamily: \"Poppins\", marginTop: \"15px\"}}>\r\n                    Add a new project to get started.\r\n                </div>\r\n            </div>\r\n        );\r\n    } else return <div className=\"myknolist-title\">All</div>;\r\n}\r\n\r\nexport default All;","import React from \"react\";\r\nimport {Icon, IconButton} from \"rsuite\";\r\n\r\nfunction AddButton() {\r\n    return (\r\n        <IconButton className=\"footer-btn\" appearance=\"primary\" icon={<Icon icon=\"plus\"/>}\r\n                    circle size=\"lg\"/>\r\n    )\r\n}\r\n\r\nexport default AddButton;","// import {Alert} from 'rsuite';\r\nimport createAuth0Client from '@auth0/auth0-spa-js';\r\n\r\n// The Auth0 client for obtaining JWT's\r\nlet auth0 = null;\r\n/* global chrome */\r\n\r\nconst baseUrl = \"https://app.knolist.com\";\r\n// const baseUrl = \"http://localhost:5000\";\r\n\r\n/**\r\n * Used to construct the valid endpoint for general and filtered searches.\r\n * @param endpoint The request endpoint (including the first slash). E.g., \"/projects\"\r\n * @param query The query string\r\n * @param filters A list of filters indicating which categories to query through\r\n * @returns {String}\r\n */\r\nexport function constructHttpQuery(endpoint, query, filters) {\r\n    let finalEndpoint = endpoint + \"?query=\" + query;\r\n    if (filters.length !== 0) {\r\n        filters.forEach(function (entry) {\r\n            if (entry === \"Page Content\") {\r\n                entry = \"content\";\r\n            }\r\n            finalEndpoint = finalEndpoint + \"&filter=\" + entry.toLowerCase();\r\n        });\r\n    }\r\n    return finalEndpoint;\r\n}\r\n\r\n/**\r\n * Used to make standard requests to the Knolist API. Includes authorization.\r\n * @param endpoint The request endpoint (including the first slash). E.g., \"/projects\"\r\n * @param method The HTTP method, if none is provided we assume \"GET\". E.g., \"POST\"\r\n * @param jsonBody A JS object that will be the JSON body of the request. E.g, {title: \"New Project\"}\r\n * @returns {Promise<{body: any, status: number}>}\r\n */\r\nasync function makeHttpRequest(endpoint, method = \"GET\", jsonBody = {}) {\r\n\r\n    // Configure Auth0 Client\r\n    auth0 = await createAuth0Client({\r\n        domain: 'knolist.us.auth0.com',\r\n        client_id: 'pBu5uP4mKTQgBttTW13N0wCVgsx90KMi',\r\n        audience: 'knolist',\r\n    });\r\n\r\n\r\n    // Grab the access token from the authentication workflow\r\n    const jwt = await auth0.getTokenSilently();\r\n    // Check if it's Chrome browser, only send if so\r\n    // Based on https://stackoverflow.com/questions/9847580/how-to-detect-safari-chrome-ie-firefox-and-opera-browser\r\n    const isChrome = !!window.chrome && (!!window.chrome.webstore || !!window.chrome.runtime);\r\n    const isEdgeChromium = isChrome && (navigator.userAgent.indexOf(\"Edg\") !== -1);\r\n    if (isChrome && !isEdgeChromium) {\r\n        if (process.env.REACT_APP_CHROME_EXTENSION_ID === undefined) {\r\n            console.log(\"Please include the Chrome extension ID in the /frontend/.env.development.local file\");\r\n        } else {\r\n            chrome.runtime.sendMessage(process.env.REACT_APP_CHROME_EXTENSION_ID, {jwt: jwt},\r\n                function (response) {\r\n                    console.log(\"got response \" + response);\r\n                }\r\n            );\r\n        }\r\n    } else console.log(\"Not Chrome\");\r\n\r\n    const url = baseUrl + endpoint;\r\n    // Build params object\r\n    let params = {}\r\n    // Add authorization\r\n    params[\"headers\"] = {\r\n        \"Authorization\": \"Bearer \" + jwt\r\n    }\r\n    // Add body and content-type if necessary\r\n    if (Object.keys(jsonBody).length > 0) {\r\n        params[\"headers\"][\"Content-Type\"] = \"application/json\";\r\n        params[\"body\"] = JSON.stringify(jsonBody);\r\n    }\r\n    // Add method if not \"GET\"\r\n    if (method !== \"GET\") {\r\n        params[\"method\"] = method;\r\n    }\r\n\r\n    // Make request\r\n    const response = await fetch(url, params);\r\n    const responseStatus = response.status;\r\n    const responseBody = await response.json();\r\n\r\n    return {\r\n        status: responseStatus,\r\n        body: responseBody\r\n    };\r\n}\r\n\r\nexport default makeHttpRequest;","import React, { useState } from \"react\";\r\nimport { Modal, Button, Form, FormGroup, ControlLabel, HelpBlock, FormControl, Alert } from \"rsuite\";\r\nimport makeHttpRequest from \"../services/HttpRequest\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nfunction NewProjectModal(props) {\r\n    const show = props.show;\r\n    const setShow = props.setShow;\r\n    const history = useHistory();\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    const openProject = () => {\r\n        const projectTitle = document.getElementById(\"titleInput\").value;\r\n        let projectDesc = document.getElementById(\"descriptionInput\").value;\r\n        if (projectTitle.length === 0) {\r\n            setLoading(false);\r\n            Alert.error(\"Title is required!\", 2000);\r\n            return;\r\n        }\r\n        let body = {};\r\n        if (projectDesc == null || projectDesc === \"\") {\r\n            body = {\r\n                \"title\": projectTitle\r\n            }\r\n        } else {\r\n            body = {\r\n                \"title\": projectTitle,\r\n                \"description\": projectDesc\r\n            }\r\n        }\r\n        makeHttpRequest(\"/projects\", \"POST\", body).then(response => {\r\n            localStorage.setItem(process.env.REACT_APP_LOCAL_STORAGE_CUR_PROJECT, JSON.stringify(response.body.project));\r\n            setShow(false);\r\n            if (props.fromSidebar) history.go(0);\r\n            else history.push(\"/\");\r\n        });\r\n    }\r\n\r\n    const cancel = () => props.noCancel ? Alert.error(\"Please create a project!\") : setShow(false);\r\n\r\n    return (\r\n        <Modal show={show} style={{ overflow: \"hidden\" }} onHide={cancel}>\r\n            <Modal.Header><Modal.Title>New Project</Modal.Title></Modal.Header>\r\n            <Modal.Body>\r\n                <Form fluid>\r\n                    <FormGroup controlId=\"titleInput\">\r\n                        <ControlLabel>Title</ControlLabel>\r\n                        <FormControl name=\"title\" />\r\n                        <HelpBlock>Required</HelpBlock>\r\n                    </FormGroup>\r\n                    <FormGroup controlId=\"descriptionInput\">\r\n                        <ControlLabel>Description</ControlLabel>\r\n                        <FormControl\r\n                            rows={5}\r\n                            name=\"description\"\r\n                            componentClass=\"textarea\" />\r\n                    </FormGroup>\r\n                </Form>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                    <Button\r\n                        onClick={() => {\r\n                            setLoading(true);\r\n                            openProject();\r\n                        }}\r\n                        appearance=\"primary\"\r\n                        loading={loading}>\r\n                        Create\r\n                    </Button>\r\n                <Button onClick={cancel} appearance=\"default\">\r\n                    Cancel\r\n                </Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    );\r\n}\r\n\r\nexport default NewProjectModal;","import React, { useState, useEffect } from \"react\";\r\nimport Recent from \"./Recent.js\";\r\nimport All from \"./All.js\";\r\nimport AddButton from \"../components/AddButton.js\";\r\nimport makeHttpRequest from \"../services/HttpRequest.js\";\r\nimport NewProjectModal from \"../components/NewProjectModal.js\";\r\nimport { Loader } from \"rsuite\";\r\n\r\n/*\r\n  Renders the main display of projects + new project button\r\n\r\n  Fetches every project the user has, which is passed to\r\n  child components for filtering\r\n*/\r\nfunction Main(props) {\r\n  const [show, setShow] = useState(false);\r\n  const [projects, setProjects] = useState(null);\r\n  //Stops making an API call on every render which makes my computer breathe heavy lol\r\n  const [gotProjects, setGotProjects] = useState(false);\r\n  const [stats, setStats] = useState(null);\r\n\r\n  const getProjects = () => {\r\n    if (!gotProjects) {\r\n      makeHttpRequest(\"/projects\")\r\n        .then(res => setProjects(res.body.projects));\r\n\r\n      makeHttpRequest(\"/projects/statistics\")\r\n          .then(res => setStats(res.body.stats));\r\n      setGotProjects(true);\r\n    }\r\n  }\r\n\r\n  //Async function above works only when used in combination with\r\n  //a lifecycle function (this is basically a componentDidMount)\r\n  useEffect(() => {\r\n    getProjects();\r\n  });\r\n\r\n  if (projects !== null && stats !== null) {\r\n    return (\r\n      <div id=\"myknolist-main-container\">\r\n        <Recent show={props.showRecent} projects={projects} stats={stats} />\r\n        <All\r\n          projects={projects}\r\n          sharedOnly={props.sharedOnly}\r\n          archivedOnly={props.archivedOnly}\r\n          sortCriterion={props.sortCriterion}\r\n          searchQuery={props.searchQuery}\r\n          stats={stats}/>\r\n        <div\r\n          style={{ position: \"fixed\", right: 0, bottom: 0 }}\r\n          onClick={() => setShow(true)}>\r\n          <AddButton />\r\n        </div>\r\n\r\n        <NewProjectModal show={show} setShow={setShow} fromSidebar={false} />\r\n      </div>\r\n    );\r\n  } else return <Loader size=\"lg\" center />;\r\n}\r\n\r\nexport default Main;","import React, { useState } from \"react\";\r\nimport Header from \"./Header.js\";\r\nimport Sidebar from \"./Sidebar.js\";\r\nimport Main from \"./Main.js\";\r\n\r\n/*\r\n    Renders the components that make up the entire page\r\n    (My Projects, Shared With Me, and Archived)\r\n\r\n    Contains states for sorting and searching. These states\r\n    are changed in child components, which triggers a rerender\r\n    of the page. Also controls the content the page shows:\r\n    shared projects, archived projects, etc.\r\n*/\r\nfunction Page(props) {\r\n    let showRecent = false; //only want to show the recent section for My Projects\r\n    let sharedOnly = false;\r\n    let archivedOnly = false;\r\n    if (props.url === \"/my-projects\") showRecent = true;\r\n    if (props.url === \"/shared\") sharedOnly = true;\r\n    if (props.url === \"/archived\") archivedOnly = true;\r\n\r\n    const [sortCriterion, setSortCriterion] = useState(\"\"); //current sort option\r\n    const [searchQuery, setSearchQuery] = useState(\"\"); //current search query\r\n\r\n    //reset showRecent to false if there's an active search query\r\n    //so just the search results are displayed on the page\r\n    if (searchQuery !== \"\") showRecent = false;\r\n\r\n    return (\r\n        <div>\r\n            <Header\r\n                setSortCriterion={setSortCriterion}\r\n                sortCriterion={sortCriterion}\r\n                setSearchQuery={setSearchQuery}\r\n                showSearch={true}/>\r\n            <Sidebar />\r\n            <Main\r\n                showRecent={showRecent}\r\n                sharedOnly={sharedOnly}\r\n                archivedOnly={archivedOnly}\r\n                sortCriterion={sortCriterion}\r\n                searchQuery={searchQuery} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Page;","import React, { useState } from \"react\";\r\nimport Header from \"./Header.js\"\r\nimport Sidebar from \"./Sidebar.js\";\r\nimport { Input, Toggle, Divider, Button, Grid, Row, Col, Dropdown } from \"rsuite\";\r\n\r\nfunction Settings() {\r\n  const [activeKey, setActiveKey] = useState(\"Medium\");\r\n\r\n  return (\r\n    <div>\r\n      <Header showSearch={false} />\r\n      <Sidebar />\r\n      <div id=\"myknolist-main-container\">\r\n        <div style={{ width: \"50%\" }}>\r\n          <Grid>\r\n            <Row>\r\n              <Col xs={2} style={{ paddingTop: \"1vh\", fontWeight: \"bold\" }}>Full Name</Col>\r\n              <Col xs={6}><Input placeholder=\"John Doe\" /></Col>\r\n            </Row>\r\n            <Row style={{ marginTop: \"2vh\" }}>\r\n              <Col xs={2} style={{ paddingTop: \"1vh\", fontWeight: \"bold\" }}>Email</Col>\r\n              <Col xs={6}><Input placeholder=\"johndoe@gmail.com\" /></Col>\r\n            </Row>\r\n            <Row style={{ marginTop: \"2vh\" }}>\r\n              <Col xs={2} style={{ paddingTop: \"1vh\", fontWeight: \"bold\" }}>Password</Col>\r\n              <Col xs={6}><Button appearance=\"default\" size=\"sm\">Change</Button></Col>\r\n            </Row>\r\n            <Divider />\r\n            <Row style={{ marginTop: \"2vh\" }}>\r\n              <Col xs={2} style={{ paddingTop: \".5vh\", fontWeight: \"bold\" }}>Dark Mode</Col>\r\n              <Col xs={6}><Toggle /></Col>\r\n            </Row>\r\n            <Row style={{ marginTop: \"2vh\" }}>\r\n              <Col xs={2} style={{ paddingTop: \"1.1vh\", fontWeight: \"bold\" }}>Text Size</Col>\r\n              <Col xs={6}>\r\n                <Dropdown title={activeKey} appearance=\"default\">\r\n                  <Dropdown.Item onSelect={() => setActiveKey(\"Small\")}>Small</Dropdown.Item>\r\n                  <Dropdown.Item onSelect={() => setActiveKey(\"Medium\")}>Medium</Dropdown.Item>\r\n                  <Dropdown.Item onSelect={() => setActiveKey(\"Large\")}>Large</Dropdown.Item>\r\n                </Dropdown>\r\n              </Col>\r\n            </Row>\r\n          </Grid>\r\n          <Button style={{marginTop:\"4vh\"}} appearance=\"primary\">Save</Button>\r\n        </div>\r\n      </div>\r\n    </div >\r\n  );\r\n}\r\n\r\nexport default Settings;","import React from 'react';\r\nimport {\r\n    Checkbox, CheckboxGroup, Divider, Dropdown, FlexboxGrid, Icon, IconButton, Navbar,\r\n    Tooltip, Whisper\r\n} from \"rsuite\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport horizontalLogo from \"../images/horizontal_main.png\";\r\nimport SearchBar from \"../components/SearchBar.js\";\r\n\r\nfunction AppHeader(props) {\r\n    return (\r\n        <Navbar style={{ padding: \"0 10px\" }}>\r\n            <FlexboxGrid justify=\"space-between\" align=\"middle\">\r\n                <Link to=\"/my-projects\">\r\n                    <Navbar.Header>\r\n                        <img className=\"limit-height\" src={horizontalLogo} alt=\"Knolist\" />\r\n                    </Navbar.Header>\r\n                </Link>\r\n                <div className=\"center-header-title\">\r\n                    {\r\n                        props.curProject ?\r\n                            <span style={{\r\n                                fontWeight: \"bold\",\r\n                                fontSize: \"2em\"\r\n                            }}>{props.curProject.title}</span> :\r\n                            null\r\n                    }\r\n                </div>\r\n                <FlexboxGrid.Item>\r\n                    <FlexboxGrid>\r\n                        <SearchAndFilter searchQuery={props.searchQuery} setSearchQuery={props.setSearchQuery}\r\n                            updateFilters={props.updateFilters} />\r\n                        <BibButton setShowBib={props.setShowBib} />\r\n                    </FlexboxGrid>\r\n                </FlexboxGrid.Item>\r\n            </FlexboxGrid>\r\n        </Navbar>\r\n    );\r\n}\r\n\r\nclass BibButton extends React.Component {\r\n    render() {\r\n        return (\r\n            <FlexboxGrid.Item>\r\n                <Whisper preventOverflow trigger=\"hover\" speaker={<Tooltip>Bibliography</Tooltip>}\r\n                    placement=\"bottomEnd\">\r\n                    <IconButton onClick={() => this.props.setShowBib(true)} icon={<Icon icon=\"book\" />} />\r\n                </Whisper>\r\n            </FlexboxGrid.Item>\r\n        );\r\n    }\r\n}\r\n\r\nclass SearchAndFilter extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        // TODO: make backend endpoint to return the filter categories\r\n        const filterCategories = [\r\n            \"Title\",\r\n            \"URL\",\r\n            \"Page Content\",\r\n            \"Highlights\",\r\n            \"Notes\"\r\n        ];\r\n        this.state = {\r\n            indeterminate: false,\r\n            checkAll: true,\r\n            value: filterCategories,\r\n            filterCategories: filterCategories\r\n        };\r\n    }\r\n\r\n    handleCheckAll = (value, checked) => {\r\n        const nextValue = checked ? this.state.filterCategories : [];\r\n        this.setState({\r\n            value: nextValue,\r\n            indeterminate: false,\r\n            checkAll: checked\r\n        });\r\n        this.sendFilters(nextValue);\r\n    }\r\n\r\n    handleChange = (value) => {\r\n        this.setState({\r\n            value: value,\r\n            indeterminate: value.length > 0 && value.length < this.state.filterCategories.length,\r\n            checkAll: value.length === this.state.filterCategories.length\r\n        });\r\n        this.sendFilters(value);\r\n    }\r\n\r\n    sendFilters = (value) => {\r\n        this.props.updateFilters(value);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <FlexboxGrid>\r\n                <FlexboxGrid.Item>\r\n                    <SearchBar width={250} searchQuery={this.props.searchQuery}\r\n                        setSearchQuery={this.props.setSearchQuery} updateFilters={this.props.updateFilters} />\r\n                </FlexboxGrid.Item>\r\n                <FlexboxGrid.Item>\r\n                    <FilterDropdown indeterminate={this.state.indeterminate} checkAll={this.state.checkAll}\r\n                        value={this.state.value} filterCategories={this.state.filterCategories}\r\n                        handleCheckAll={this.handleCheckAll} handleChange={this.handleChange} />\r\n                </FlexboxGrid.Item>\r\n            </FlexboxGrid>\r\n        );\r\n    }\r\n}\r\n\r\nfunction FilterDropdown(props) {\r\n    return (\r\n        <Whisper preventOverflow trigger=\"hover\" speaker={<Tooltip>Search Filters</Tooltip>}\r\n            placement=\"bottomEnd\">\r\n            <Dropdown placement=\"bottomEnd\" renderTitle={() => <IconButton icon={<Icon icon=\"filter\" />} />}>\r\n                <div style={{ width: 200 }}>\r\n                    <Checkbox indeterminate={props.indeterminate} checked={props.checkAll}\r\n                        onChange={props.handleCheckAll}>\r\n                        Select all\r\n                    </Checkbox>\r\n                    <Divider style={{ margin: \"5px 0\" }} />\r\n                    <CheckboxGroup name=\"checkboxList\" value={props.value}\r\n                        onChange={props.handleChange}>\r\n                        {props.filterCategories.map(filter => {\r\n                            return <Checkbox key={filter} value={filter}>{filter}</Checkbox>\r\n                        })}\r\n                    </CheckboxGroup>\r\n                </div>\r\n            </Dropdown>\r\n        </Whisper>\r\n    );\r\n}\r\n\r\nexport default AppHeader;","import React from \"react\";\r\nimport {Button, Icon, Modal} from \"rsuite\";\r\n\r\nfunction ConfirmDeletionWindow(props) {\r\n    return (\r\n        <Modal backdrop=\"static\" show={props.confirmDelete} onHide={props.resetDelete} size=\"xs\">\r\n            <Modal.Body>\r\n                <Icon icon=\"remind\" style={{color: '#ffb300', fontSize: 24}}/>\r\n                {'  '}\r\n                Are you sure you want to delete \"{props.title}\"?\r\n                <br/>\r\n                <b>This action cannot be undone.</b>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button onClick={props.delete} appearance=\"primary\" loading={props.loading}>\r\n                    Delete\r\n                </Button>\r\n                <Button onClick={props.resetDelete} appearance=\"default\">\r\n                    Cancel\r\n                </Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default ConfirmDeletionWindow;","import React from \"react\";\r\nimport {Button, ButtonToolbar, FlexboxGrid, Form, Icon, IconButton, Input, Nav} from \"rsuite\";\r\n\r\nimport ConfirmDeletionWindow from \"../components/ConfirmDeletionWindow\";\r\n\r\nimport makeHttpRequest from \"../services/HttpRequest\";\r\nimport {trimString} from \"../services/StringHelpers\";\r\n\r\nfunction ProjectsList(props) {\r\n    return (\r\n        <Nav vertical activeKey={props.curProject ? props.curProject.id : undefined}\r\n             onSelect={(eventKey) => props.setCurProject(eventKey)}>\r\n            {props.projects.map(project => <Project key={project.id} updateProjects={props.updateProjects}\r\n                                                    project={project}\r\n                                                    eventKey={project.id} setCurProject={props.setCurProject}\r\n                                                    setShowSharedProject={props.setShowSharedProject}/>)}\r\n        </Nav>\r\n    );\r\n}\r\n\r\nclass Project extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            confirmDelete: false,\r\n            loading: false,\r\n            editing: false,\r\n            updatedProjectNameFormId: \"updated-project-name\",\r\n            updateProjectNameButtonId: \"update-project-name-button\"\r\n        }\r\n    }\r\n\r\n    setLoading = (val) => {\r\n        this.setState({loading: val})\r\n    }\r\n\r\n    setEditing = (val) => {\r\n        this.setState({editing: val})\r\n    }\r\n\r\n    cancelEditing = (event) => {\r\n        if (event.relatedTarget === null || event.relatedTarget.id !== this.state.updateProjectNameButtonId) {\r\n            this.setEditing(false);\r\n        }\r\n    }\r\n\r\n    setDeleteProject = (event) => {\r\n        event.stopPropagation();\r\n        this.setState({confirmDelete: true})\r\n    }\r\n\r\n    resetDeleteProject = () => {\r\n        this.setState({confirmDelete: false})\r\n    }\r\n\r\n    deleteProject = () => {\r\n        this.setLoading(true);\r\n        const endpoint = \"/projects/\" + this.props.project.id;\r\n        makeHttpRequest(endpoint, \"DELETE\").then(() => {\r\n            // Reset the current project if the deleted is active\r\n            let callback;\r\n            if (this.props.active) callback = () => this.props.setCurProject(null);\r\n            this.props.updateProjects(callback);\r\n        });\r\n    }\r\n\r\n    updateProjectName = () => {\r\n        this.setLoading(true);\r\n        const updatedProjectName = trimString(document.getElementById(this.state.updatedProjectNameFormId).value);\r\n        const endpoint = \"/projects/\" + this.props.project.id;\r\n        const body = {\r\n            \"title\": updatedProjectName\r\n        }\r\n\r\n        makeHttpRequest(endpoint, \"PATCH\", body).then(() => {\r\n            this.props.updateProjects(() => {\r\n                this.setEditing(false);\r\n                this.setLoading(false);\r\n            });\r\n        });\r\n    }\r\n\r\n    render() {\r\n        //console.log(this.props.project)\r\n        return (\r\n            <div>\r\n                <ConfirmDeletionWindow confirmDelete={this.state.confirmDelete} resetDelete={this.resetDeleteProject}\r\n                                       title={this.props.project.title} delete={this.deleteProject}\r\n                                       loading={this.state.loading}/>\r\n                <Nav.Item onSelect={this.props.onSelect} eventKey={this.props.eventKey} active={this.props.active}>\r\n                    <FlexboxGrid justify=\"space-between\">\r\n                        <FlexboxGrid.Item>\r\n                            {\r\n                                this.state.editing ?\r\n                                    <Form onSubmit={this.updateProjectName}>\r\n                                        <Input autoFocus required id={this.state.updatedProjectNameFormId}\r\n                                               onClick={(e) => e.stopPropagation()}\r\n                                               onBlur={(e) => this.cancelEditing(e)}\r\n                                               defaultValue={this.props.project.title}/>\r\n                                    </Form> :\r\n                                    this.props.project.title\r\n                            }\r\n                        </FlexboxGrid.Item>\r\n                        <FlexboxGrid.Item>\r\n                            <ButtonToolbar>\r\n                                <EditProjectNameButton loading={this.state.loading} editing={this.state.editing}\r\n                                                       updateProjectNameButtonId={this.state.updateProjectNameButtonId}\r\n                                                       setEditing={this.setEditing}\r\n                                                       updateProjectName={this.updateProjectName}/>\r\n                                <IconButton onClick={this.setDeleteProject} icon={<Icon icon=\"trash\"/>} size=\"sm\"/>\r\n                                <SharedProjectButton isShared={this.props.project.shared_users.length > 0}\r\n                                                     setShowSharedProject={this.props.setShowSharedProject}/>\r\n                            </ButtonToolbar>\r\n                        </FlexboxGrid.Item>\r\n                    </FlexboxGrid>\r\n                </Nav.Item>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass EditProjectNameButton extends React.Component {\r\n    buttonAction = (event, editing) => {\r\n        event.stopPropagation();\r\n        if (editing) this.props.setEditing(editing);\r\n        else this.props.updateProjectName();\r\n    }\r\n\r\n    render() {\r\n        if (this.props.editing) {\r\n            return (\r\n                <Button id={this.props.updateProjectNameButtonId} loading={this.props.loading}\r\n                        onClick={(e) => this.buttonAction(e, false)}>Update</Button>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <IconButton onClick={(e) => this.buttonAction(e, true)} icon={<Icon icon=\"edit2\"/>} size=\"sm\"/>\r\n        );\r\n    }\r\n}\r\n\r\nclass SharedProjectButton extends React.Component {\r\n    handleClick = (event) => {\r\n        event.stopPropagation();\r\n        this.props.setShowSharedProject(true);\r\n    }\r\n\r\n    render() {\r\n        let icon;\r\n        if (this.props.isShared) {\r\n            icon = \"share-alt\"\r\n        } else {\r\n            icon = \"people-group\"\r\n        }\r\n        return (\r\n            // <Whisper preventOverflow trigger=\"hover\" speaker={<Tooltip>Share Project</Tooltip>}\r\n            //                      placement=\"bottom\">\r\n            <IconButton onClick={this.handleClick} icon={<Icon icon={icon}/>} size=\"sm\"/>\r\n            // </Whisper>\r\n\r\n        )\r\n    };\r\n}\r\n\r\nexport default ProjectsList;","/**\r\n * Trims a function for leading or trailing whitespace.\r\n * Based on https://stackoverflow.com/questions/8517089/js-search-in-object-values\r\n * @param s\r\n * @returns {string}\r\n */\r\nexport const trimString = (s) => {\r\n    let l = 0, r = s.length - 1;\r\n    while (l < s.length && s[l] === ' ') l++;\r\n    while (r > l && s[r] === ' ') r -= 1;\r\n    return s.substring(l, r + 1);\r\n};","import React from \"react\";\r\nimport {Drawer, Icon, IconButton, Placeholder, Tooltip, Whisper} from \"rsuite\";\r\n\r\nimport ProjectsList from \"./ProjectsList\";\r\nimport NewProjectModal from \"../components/NewProjectModal\";\r\n\r\nclass ProjectsSidebar extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            showNewProjectForm: false,\r\n        }\r\n    }\r\n\r\n    setShowNewProjectForm = (val) => {\r\n        this.setState({showNewProjectForm: val})\r\n    }\r\n\r\n    renderProjectsList = () => {\r\n        if (this.props.projects === null) return <Placeholder.Paragraph rows={15} active/>;\r\n\r\n        return <ProjectsList projects={this.props.projects} curProject={this.props.curProject}\r\n                             updateProjects={this.props.updateProjects} setCurProject={this.props.setCurProject}\r\n                             setShowSharedProject={this.props.setShowSharedProject}/>\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.updateProjects();\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (prevProps.show !== this.props.show && !this.props.show) {\r\n            this.setShowNewProjectForm(false);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Drawer\r\n                    size=\"xs\"\r\n                    show={this.props.show}\r\n                    onHide={this.props.close}>\r\n                    <Drawer.Header>\r\n                        <Drawer.Title>Your Projects</Drawer.Title>\r\n                    </Drawer.Header>\r\n                    <Drawer.Body style={{marginBottom: 10}}>\r\n                        {this.renderProjectsList()}\r\n                    </Drawer.Body>\r\n                    <Drawer.Footer>\r\n                        <NewProjectButton setShowNewProjectForm={this.setShowNewProjectForm}\r\n                                          showNewProjectForm={this.state.showNewProjectForm}/>\r\n                    </Drawer.Footer>\r\n                </Drawer>\r\n                <NewProjectModal show={this.state.showNewProjectForm} setShow={this.setShowNewProjectForm}\r\n                                 fromSidebar={true}/>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    /* ***OLD RENDER***\r\n    render() {\r\n        return (\r\n            <Drawer\r\n                size=\"xs\"\r\n                show={this.props.show}\r\n                onHide={this.props.close}>\r\n                <Drawer.Header>\r\n                    <Drawer.Title>Your Projects</Drawer.Title>\r\n                </Drawer.Header>\r\n                <Drawer.Body style={{marginBottom: 10}}>\r\n                    {this.renderProjectsList()}\r\n                    <NewProjectForm show={this.state.showNewProjectForm}\r\n                                    setShowNewProjectForm={this.setShowNewProjectForm}\r\n                                    setCurProject={this.props.setCurProject}\r\n                                    updateProjects={this.props.updateProjects}/>\r\n                </Drawer.Body>\r\n                <Drawer.Footer>\r\n                    <NewProjectButton setShowNewProjectForm={this.setShowNewProjectForm}\r\n                                      showNewProjectForm={this.state.showNewProjectForm}/>\r\n                </Drawer.Footer>\r\n            </Drawer>\r\n        )\r\n    }*/\r\n}\r\n\r\nfunction NewProjectButton(props) {\r\n    return (\r\n        <Whisper preventOverflow trigger=\"hover\" speaker={<Tooltip>New Project</Tooltip>}\r\n                 placement=\"topEnd\">\r\n            <IconButton onClick={() => props.setShowNewProjectForm(true)} appearance=\"primary\"\r\n                        icon={<Icon icon=\"plus\"/>} circle size=\"lg\"/>\r\n        </Whisper>\r\n    );\r\n}\r\n\r\n/* ***OLD NEWPROJECTBUTTON***\r\nfunction NewProjectButton(props) {\r\n    if (props.showNewProjectForm) {\r\n        return (\r\n            <Button onClick={() => props.setShowNewProjectForm(false)}>Cancel</Button>\r\n        );\r\n    } else {\r\n        return (\r\n            <Whisper preventOverflow trigger=\"hover\" speaker={<Tooltip>New Project</Tooltip>}\r\n                placement=\"topEnd\">\r\n                <IconButton onClick={() => props.setShowNewProjectForm(true)} appearance=\"primary\"\r\n                    icon={<Icon icon=\"plus\" />} circle size=\"lg\" />\r\n            </Whisper>\r\n        );\r\n    }\r\n}*/\r\n\r\n// class NewProjectForm extends React.Component {\r\n//     constructor(props) {\r\n//         super(props);\r\n//         this.state = {\r\n//             inputId: \"new-project-name\",\r\n//             loading: false\r\n//         }\r\n//     }\r\n//\r\n//     componentDidUpdate(prevProps, prevState, snapshot) {\r\n//         if (prevProps.show !== this.props.show && this.props.show) {\r\n//             document.getElementById(this.state.inputId).focus();\r\n//         }\r\n//     }\r\n//\r\n//     setLoading = (val) => {\r\n//         this.setState({ loading: val })\r\n//     }\r\n//\r\n//     submit = () => {\r\n//         this.setLoading(true);\r\n//         let projectName = document.getElementById(this.state.inputId).value;\r\n//         projectName = trimString(projectName);\r\n//         const endpoint = \"/projects\";\r\n//         const body = {\r\n//             \"title\": projectName\r\n//         }\r\n//\r\n//         makeHttpRequest(endpoint, \"POST\", body).then((response) => {\r\n//             // Update projects\r\n//             const callback = () => {\r\n//                 this.props.setShowNewProjectForm(false);\r\n//                 this.props.setCurProject(response.body.project.id);\r\n//                 this.setLoading(false);\r\n//             }\r\n//             this.props.updateProjects(callback);\r\n//         });\r\n//     }\r\n//\r\n//     render() {\r\n//         // if (!this.props.show) return null;\r\n//\r\n//         return (\r\n//             <Animation.Fade in={this.props.show}>\r\n//                 <Form id=\"new-project-form\" layout=\"inline\" onSubmit={this.submit}>\r\n//                     <Input autoFocus required id={this.state.inputId} placeholder=\"New Project Name\" />\r\n//                     <Button style={{ float: \"right\", margin: 0 }} appearance=\"primary\" loading={this.state.loading}\r\n//                         type=\"submit\">Create</Button>\r\n//                 </Form>\r\n//             </Animation.Fade>\r\n//         );\r\n//     }\r\n// }\r\n\r\nexport default ProjectsSidebar;","import React from \"react\";\r\nimport {\r\n    Button, Icon, IconButton, Input, Modal, Tooltip, Whisper\r\n} from \"rsuite\";\r\n\r\nimport ConfirmDeletionWindow from \"../components/ConfirmDeletionWindow\";\r\nimport makeHttpRequest from \"../services/HttpRequest\";\r\n\r\nclass ItemView extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            confirmDelete: false,\r\n            loadingDelete: false\r\n        }\r\n    }\r\n\r\n    setConfirmDelete = (val) => {\r\n        this.setState({confirmDelete: val}, () => this.setLoadingDelete(false));\r\n    }\r\n\r\n    setLoadingDelete = (val) => {\r\n        this.setState({loadingDelete: val});\r\n    }\r\n\r\n    deleteItem = () => {\r\n        this.setLoadingDelete(true);\r\n        const endpoint = \"/items/\" + this.props.selectedItem.id;\r\n        makeHttpRequest(endpoint, \"DELETE\").then(() => {\r\n            this.props.renderNetwork(() => {\r\n                this.setConfirmDelete(false);\r\n                this.close();\r\n            });\r\n        })\r\n    }\r\n\r\n    addNewNote = () => {\r\n        this.props.setAddItemMode(\"Note\", this.props.selectedItem.url);\r\n        this.close();\r\n    }\r\n\r\n    close = () => {\r\n        this.props.setSelectedItem(null);\r\n    }\r\n\r\n    generateItemBody = (item, typeOfNode, nodeTypes) => {\r\n        let modalHeaderAndBody = <div/>;\r\n        if (typeOfNode === nodeTypes.SOURCEANDNOTE) {\r\n            modalHeaderAndBody =\r\n                <SourceAndNoteView item={item} getSelectedItemDetails={this.props.getSelectedItemDetails}\r\n                                   renderNetwork={this.props.renderNetwork}/>\r\n        } else if (typeOfNode === nodeTypes.SOURCEANDHIGHLIGHT) {\r\n            modalHeaderAndBody =\r\n                <SourceAndHighlightView item={item} getSelectedItemDetails={this.props.getSelectedItemDetails}\r\n                                        renderNetwork={this.props.renderNetwork}/>\r\n        } else if (typeOfNode === nodeTypes.PURENOTE) {\r\n            modalHeaderAndBody =\r\n                <PureNoteView item={item} getSelectedItemDetails={this.props.getSelectedItemDetails}\r\n                              renderNetwork={this.props.renderNetwork}/>\r\n        } else if (typeOfNode === nodeTypes.PURESOURCE) {\r\n            modalHeaderAndBody =\r\n                <PureSourceView item={item} getSelectedItemDetails={this.props.getSelectedItemDetails}\r\n                                renderNetwork={this.props.renderNetwork}/>\r\n        }\r\n        return modalHeaderAndBody;\r\n    }\r\n\r\n    render() {\r\n        if (this.props.selectedItem === null) return null;\r\n\r\n        const item = this.props.selectedItem;\r\n        const typeOfNode = this.props.getNodeType(item);\r\n        const nodeTypes = this.props.nodeTypes;\r\n\r\n        return (\r\n            <div>\r\n                <ConfirmDeletionWindow confirmDelete={this.state.confirmDelete}\r\n                                       resetDelete={() => this.setConfirmDelete(false)}\r\n                                       title={item.title} delete={this.deleteItem}\r\n                                       loading={this.state.loadingDelete}/>\r\n                <Modal size=\"md\" show onHide={this.close}>\r\n                    {this.generateItemBody(item, typeOfNode, nodeTypes)}\r\n                    <Modal.Footer>\r\n                        <Whisper preventOverflow trigger=\"hover\" speaker={<Tooltip>Delete Item</Tooltip>}\r\n                                 placement=\"bottom\">\r\n                            <IconButton onClick={() => this.setConfirmDelete(true)} icon={<Icon icon=\"trash\"/>}\r\n                                        size=\"lg\"/>\r\n                        </Whisper>\r\n                        <Button appearance=\"primary\" onClick={this.addNewNote}>\r\n                            Add New Note\r\n                        </Button>\r\n                    </Modal.Footer>\r\n                </Modal>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction PureNoteView(props) {\r\n    return (\r\n        <div>\r\n            <Modal.Header>\r\n                <Modal.Title>\r\n                    {props.item.content.substring(0, 100)}\r\n                </Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <NoteContent item={props.item} getSelectedItemDetails={props.getSelectedItemDetails}\r\n                             renderNetwork={props.renderNetwork}/>\r\n            </Modal.Body>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction SourceAndHighlightView(props) {\r\n    return (\r\n        <div>\r\n            <Modal.Header>\r\n                <Modal.Title>\r\n                    <SourceTitle item={props.item} getSelectedItemDetails={props.getSelectedItemDetails}\r\n                                 renderNetwork={props.renderNetwork}/>\r\n                </Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                {props.item.content}\r\n            </Modal.Body>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction SourceAndNoteView(props) {\r\n    return (\r\n        <div>\r\n            <Modal.Header>\r\n                <Modal.Title>\r\n                    <SourceTitle item={props.item} getSelectedItemDetails={props.getSelectedItemDetails}\r\n                                 renderNetwork={props.renderNetwork}/>\r\n                </Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <NoteContent item={props.item} getSelectedItemDetails={props.getSelectedItemDetails}\r\n                             renderNetwork={props.renderNetwork}/>\r\n            </Modal.Body>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction PureSourceView(props) {\r\n    return (\r\n        <div>\r\n            <Modal.Header>\r\n                <Modal.Title>\r\n                    <SourceTitle item={props.item} getSelectedItemDetails={props.getSelectedItemDetails}\r\n                                 renderNetwork={props.renderNetwork}/>\r\n                </Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n            </Modal.Body>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nclass SourceTitle extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            editMode: false,\r\n            loading: false,\r\n            newSourceTitleInputId: \"new-source-title-input\"\r\n        }\r\n    }\r\n\r\n    setLoading = (val) => {\r\n        this.setState({loading: val});\r\n    }\r\n\r\n    updateTitle = (callback) => {\r\n        const newTitle = document.getElementById(this.state.newSourceTitleInputId).value;\r\n        if (newTitle === this.props.item.title) {\r\n            callback();\r\n            return;\r\n        }\r\n        this.setLoading(true);\r\n        const endpoint = \"/items/\" + this.props.item.id;\r\n        const body = {\r\n            \"title\": newTitle\r\n        }\r\n\r\n        makeHttpRequest(endpoint, \"PATCH\", body).then(() => {\r\n            this.props.renderNetwork(() => {\r\n                this.props.getSelectedItemDetails().then(() => {\r\n                    this.setLoading(false);\r\n                    callback();\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    setEditMode = (val) => {\r\n        if (!val) {\r\n            this.updateTitle(() => this.setState({editMode: val}));\r\n        } else {\r\n            this.setState({editMode: val});\r\n        }\r\n    }\r\n\r\n    renderTitle = () => {\r\n        if (this.state.editMode) {\r\n            return <Input style={{width: 400, marginRight: 10}} defaultValue={this.props.item.title}\r\n                          id={this.state.newSourceTitleInputId} autoFocus required/>\r\n        } else {\r\n            return <a target=\"_blank\" rel=\"noopener noreferrer\" style={{marginRight: 10}}\r\n                      href={this.props.item.url}>{this.props.item.title}</a>\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div style={{display: \"flex\"}}>\r\n                {this.renderTitle()}\r\n                <EditSourceItemButton hide={false} editMode={this.state.editMode} loading={this.state.loading}\r\n                                      setEditMode={this.setEditMode} tooltipText=\"Rename\"/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass NoteContent extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            editMode: false,\r\n            loading: false,\r\n            noteContentId: \"note-content-input\"\r\n        }\r\n    }\r\n\r\n    setLoading = (val) => {\r\n        this.setState({loading: val});\r\n    }\r\n\r\n    updateContent = (callback) => {\r\n        const newContent = document.getElementById(this.state.noteContentId).value;\r\n        if (newContent === this.props.item.content) {\r\n            callback();\r\n            return;\r\n        }\r\n        this.setLoading(true);\r\n        const endpoint = \"/items/\" + this.props.item.id;\r\n        const body = {\r\n            \"content\": newContent\r\n        }\r\n\r\n        makeHttpRequest(endpoint, \"PATCH\", body).then(() => {\r\n            this.props.renderNetwork(() => {\r\n                this.props.getSelectedItemDetails().then(() => {\r\n                    this.setLoading(false);\r\n                    callback();\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    setEditMode = (val) => {\r\n        if (!val) {\r\n            this.updateContent(() => this.setState({editMode: val}));\r\n        } else {\r\n            this.setState({editMode: val});\r\n        }\r\n    }\r\n\r\n    renderContent = () => {\r\n        if (this.state.editMode) {\r\n            return <Input style={{width: \"100%\", marginRight: 10}} defaultValue={this.props.item.content}\r\n                          id={this.state.noteContentId} autoFocus required componentClass=\"textarea\" rows={30}/>\r\n        } else {\r\n            return (\r\n                <div>\r\n                    {this.props.item.content}\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div style={{display: \"flex\"}}>\r\n                {this.renderContent()}\r\n                <EditSourceItemButton hide={false} editMode={this.state.editMode} loading={this.state.loading}\r\n                                      setEditMode={this.setEditMode} tooltipText=\"Edit\"/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction EditSourceItemButton(props) {\r\n    if (props.hide) return null;\r\n\r\n    const buttonSize = \"xs\";\r\n    if (props.editMode) {\r\n        return <Button onClick={() => props.setEditMode(false)} loading={props.loading} size={buttonSize}>Done</Button>\r\n    } else {\r\n        return (\r\n            <Whisper preventOverflow trigger=\"hover\" speaker={<Tooltip>{props.tooltipText}</Tooltip>} placement=\"top\">\r\n                <IconButton onClick={() => props.setEditMode(true)} icon={<Icon icon=\"edit2\"/>} size={buttonSize}/>\r\n            </Whisper>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ItemView;","import React from \"react\";\r\nimport {Alert, Button, Form, Input, Modal} from \"rsuite\";\r\n\r\nimport makeHttpRequest from \"../services/HttpRequest\";\r\n\r\nclass NewItemForm extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            newItemUrlId: \"new-item-url\",\r\n            newItemNotesId: \"new-item-notes\",\r\n            loading: false\r\n        };\r\n    }\r\n\r\n    close = () => {\r\n        this.props.switchShowNewItemForm()\r\n    }\r\n\r\n    setLoading = (val) => {\r\n        this.setState({loading: val})\r\n    }\r\n\r\n    addNewItem = () => {\r\n        this.setLoading(true);\r\n        let url;\r\n        if (!this.props.item) {\r\n            url = document.getElementById(this.state.newItemUrlId).value;\r\n            if (url === \"\") {\r\n                url = null;\r\n            }\r\n        } else {\r\n            url = this.props.item;\r\n        }\r\n        let content;\r\n        if (this.props.inputType === \"Note\") {\r\n            content = document.getElementById(this.state.newItemNotesId).value;\r\n        } else {\r\n            content = null;\r\n        }\r\n        const {x, y} = this.props.newItemData;\r\n        const endpoint = \"/items\";\r\n        const body = {\r\n            \"url\": url,\r\n            \"content\": content,\r\n            \"x_position\": x,\r\n            \"y_position\": y,\r\n            \"is_note\": content !== null\r\n        }\r\n        if (this.props.parentCluster !== null) body[\"parent_cluster\"] = this.props.parentCluster.id;\r\n        else body[\"parent_project\"] = this.props.curProject.id;\r\n\r\n        makeHttpRequest(endpoint, \"POST\", body).then((response) => {\r\n            if (response.status === 200) {\r\n                // Alert that the item already exists in this project\r\n                Alert.info('This item already exists in this project.');\r\n                this.props.switchShowNewItemForm();\r\n            } else if (response.status === 201) {\r\n                // Update items\r\n                this.props.renderNetwork(() => {\r\n                    Alert.success('Item added successfully.');\r\n                    this.props.switchShowNewItemForm();\r\n                });\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (prevProps.showNewItemForm !== this.props.showNewItemForm && this.props.showNewItemForm) {\r\n            this.setLoading(false);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.showNewItemForm) return null;\r\n        let body;\r\n        if (this.props.inputType === \"URL\") {\r\n            // New URL\r\n            body =\r\n                <Input autoFocus required type=\"URL\" id={this.state.newItemUrlId} placeholder=\"Add URL\"/>;\r\n        } else if (this.props.inputType === \"Note\" && this.props.item) {\r\n            // New note created from a source node\r\n            body =\r\n                <Input autoFocus type={\"Note\"} required id={this.state.newItemNotesId}\r\n                       placeholder=\"Add Note\" componentClass=\"textarea\" rows={30}/>;\r\n        } else if (this.props.inputType === \"Note\" && !this.props.item) {\r\n            // New note without a source passed in\r\n            body =\r\n                <div>\r\n                    <Input autoFocus type=\"URL\" id={this.state.newItemUrlId} placeholder=\"Add optional URL\"/>\r\n                    <Input type={\"Note\"} required id={this.state.newItemNotesId}\r\n                           placeholder=\"Add Note\" componentClass=\"textarea\" rows={30}/>\r\n                </div>;\r\n        }\r\n\r\n        return (\r\n            <Modal show onHide={this.close}>\r\n                <Modal.Header>\r\n                    <Modal.Title>\r\n                        Insert the {this.props.inputType} you'd like to add.\r\n                    </Modal.Title>\r\n                </Modal.Header>\r\n                <Form onSubmit={this.addNewItem}>\r\n                    <Modal.Body>\r\n                        {body}\r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n                        <Button type=\"submit\" loading={this.state.loading} appearance=\"primary\">\r\n                            Add Item\r\n                        </Button>\r\n                    </Modal.Footer>\r\n                </Form>\r\n            </Modal>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NewItemForm;","import React from \"react\";\r\nimport {Alert, Button, Form, Input, Modal} from \"rsuite\";\r\n\r\nimport makeHttpRequest from \"../services/HttpRequest\";\r\n\r\nclass NewClusterForm extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            newClusterNameId: \"new-cluster-name\",\r\n            loading: false\r\n        }\r\n    }\r\n\r\n    close = () => {\r\n        this.props.switchShowNewClusterForm()\r\n    }\r\n\r\n    setLoading = (val) => {\r\n        this.setState({loading: val})\r\n    }\r\n\r\n    addNewCluster = () => {\r\n        this.setLoading(true);\r\n        const item1_id = this.props.newClusterIds.item1;\r\n        const item2_id = this.props.newClusterIds.item2;\r\n        const name = document.getElementById(this.state.newClusterNameId).value;\r\n        const {x, y} = this.props.stationaryClusterItemData;\r\n\r\n        const body = {\r\n            \"item1_id\": item1_id,\r\n            \"item2_id\": item2_id,\r\n            \"x_position\": x,\r\n            \"y_position\": y,\r\n            \"name\": name\r\n        }\r\n        const endpoint = \"/clusters\";\r\n        makeHttpRequest(endpoint, \"POST\", body).then((response) => {\r\n            const callback = () => {\r\n                this.props.switchShowNewClusterForm();\r\n                this.props.disableEditMode();\r\n            }\r\n\r\n            if (response.status === 201) {\r\n                this.props.renderNetwork(() => {\r\n                    callback();\r\n                    Alert.success('Cluster created successfully');\r\n                });\r\n            } else {\r\n                callback();\r\n                Alert.error('Something went wrong');\r\n            }\r\n\r\n        });\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (prevProps.showNewClusterForm !== this.props.showNewClusterForm && this.props.showNewClusterForm) {\r\n            this.setLoading(false);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.showNewClusterForm) return null;\r\n\r\n        return (\r\n            <Modal show onHide={this.close} style={modalStyle}>\r\n                <Modal.Header>\r\n                    <Modal.Title>\r\n                        Enter the name of the cluster you'd like to create\r\n                    </Modal.Title>\r\n                </Modal.Header>\r\n                <Form onSubmit={this.addNewCluster}>\r\n                    <Modal.Body>\r\n                        <Input autoFocus type=\"text\" required id={this.state.newClusterNameId}\r\n                               placeholder=\"New Cluster Name\"/>\r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n                        <Button type=\"submit\" loading={this.state.loading} appearance=\"primary\">\r\n                            Add Cluster\r\n                        </Button>\r\n                    </Modal.Footer>\r\n                </Form>\r\n            </Modal>\r\n        );\r\n    }\r\n}\r\n\r\nconst modalStyle = {\r\n    position: 'fixed',\r\n    top: '50%',\r\n    left: '50%',\r\n    marginTop: '-96px',\r\n    marginLeft: '-300px'\r\n}\r\n\r\nexport default NewClusterForm;","import React from \"react\";\r\nimport {Alert, Dropdown, Icon, IconButton, Tooltip, Whisper} from \"rsuite\";\r\nimport AddButton from \"../components/AddButton.js\";\r\n\r\nclass AppFooter extends React.Component {\r\n    newItemButton = () => {\r\n        return (\r\n            <AddButton/>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div style={{bottom: 0}}>\r\n                <div style={{position: \"absolute\", left: 0, bottom: 0}}>\r\n                    <Whisper preventOverflow trigger=\"hover\" speaker={<Tooltip>Fit To Screen</Tooltip>}\r\n                             placement=\"topStart\">\r\n                        <IconButton className=\"footer-btn\" appearance=\"primary\" icon={<Icon icon=\"arrows-alt\"/>} circle\r\n                                    size=\"lg\" onClick={this.props.fit}/>\r\n                    </Whisper>\r\n                </div>\r\n                <a style={{marginBottom: 25, bottom: 0}}\r\n                   className=\"center-header-title\"\r\n                   target=\"_blank\"\r\n                   rel=\"noopener noreferrer\"\r\n                   href={process.env.REACT_APP_FEEDBACK_LINK}>\r\n                    Feedback?\r\n                </a>\r\n                <div style={{position: \"absolute\", right: 0, bottom: 0}}>\r\n                    <Dropdown style={{marginRight: 15}} trigger={[\"click\", \"hover\"]} placement=\"topEnd\"\r\n                              renderTitle={this.newItemButton}>\r\n                        <Dropdown.Item onClick={() => Alert.warning(\"Feature coming soon...\")}>\r\n                            <Icon icon=\"file-o\"/> Add File\r\n                        </Dropdown.Item>\r\n                        <Dropdown.Item onClick={() => this.props.setAddItemMode(\"URL\")}>\r\n                            <Icon icon=\"globe2\"/> Add Web Page\r\n                        </Dropdown.Item>\r\n                        <Dropdown.Item onClick={() => this.props.setAddItemMode(\"Note\")}>\r\n                            <Icon icon=\"edit\"/> Add Notes\r\n                        </Dropdown.Item>\r\n                    </Dropdown>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AppFooter;","import React from \"react\";\r\nimport {\r\n    Modal, SelectPicker, IconButton, Icon, Checkbox, Form, FormGroup, FormControl, ControlLabel,\r\n    CheckboxGroup, Tooltip, Whisper, Divider, Alert, Button, DatePicker, Placeholder, FlexboxGrid,\r\n    Toggle\r\n} from \"rsuite\";\r\n\r\nimport makeHttpRequest from \"../services/HttpRequest\";\r\nimport FlexboxGridItem from \"rsuite/es/FlexboxGrid/FlexboxGridItem\";\r\n\r\nclass BibWindow extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        const formats = {\r\n            APA: \"APA Reference List\",\r\n            MLA: \"MLA Works Cited\",\r\n            CHI: \"Chicago Bibliography Style\"\r\n        }\r\n        const months = ['January', 'February', 'March', 'April', 'May', 'June',\r\n            'July', 'August', 'September', 'October', 'November', 'December'];\r\n        this.state = {\r\n            sources: null,\r\n            allSources: null,\r\n            subSources: null,\r\n            curFormat: formats.APA,\r\n            formats: formats,\r\n            months: months,\r\n            editSource: null,\r\n            loading: false\r\n        }\r\n    }\r\n\r\n    setLoading = (val) => {\r\n        this.setState({loading: val})\r\n    }\r\n\r\n    // Make API call to get all sources\r\n    getBibSources = (callback) => {\r\n        if (this.props.curProject === null || !this.props.showBib) return null;\r\n        this.setLoading(true);\r\n        // Get all sources in the project\r\n        const allSourceEndpoint = \"/projects/\" + this.props.curProject.id + \"/sources\";\r\n        makeHttpRequest(allSourceEndpoint).then((response) => {\r\n            let sortedAllSources = response.body.sources;\r\n            sortedAllSources = sortedAllSources.sort((a, b) => {\r\n                a.title = a.title.trim();\r\n                b.title = b.title.trim();\r\n                if (a.title > b.title) {\r\n                    return 1;\r\n                } else {\r\n                    return -1;\r\n                }\r\n            });\r\n            this.setState({sources: sortedAllSources,\r\n                                allSources: sortedAllSources,\r\n                                subSources: sortedAllSources}, () => {\r\n                if (typeof callback === \"function\") callback();\r\n            })\r\n        });\r\n\r\n        if (!this.props.curCluster) {\r\n            this.setLoading(false);\r\n            return;\r\n        }\r\n        // Get all sources in this cluster or below\r\n        const subSourceEndpoint = \"/clusters/\" + this.props.curCluster.id + \"/subsources\";\r\n        makeHttpRequest(subSourceEndpoint).then((response) => {\r\n            let sortedSubSources = response.body.sources;\r\n            sortedSubSources = sortedSubSources.sort((a, b) => {\r\n                a.title = a.title.trim();\r\n                b.title = b.title.trim();\r\n                if (a.title > b.title) {\r\n                    return 1;\r\n                } else {\r\n                    return -1;\r\n                }\r\n            });\r\n            this.setState({subSources: sortedSubSources}, () => {\r\n                if (typeof callback === \"function\") callback();\r\n                this.setLoading(false);\r\n                console.log(sortedSubSources)\r\n            })\r\n        });\r\n    }\r\n\r\n    // Copies citations in top section (those with is_included === true)\r\n    // onto clipboard with formatting\r\n    copyBib = () => {\r\n        const citationArray = document.getElementsByClassName('copyText');\r\n        let selectText = \"\";\r\n        for (let i = 0; i < citationArray.length; i++) {\r\n            selectText = selectText.concat(citationArray[i].innerHTML);\r\n            selectText = selectText.concat('<br><br>');\r\n        }\r\n\r\n        function listener(e) {\r\n            e.clipboardData.setData(\"text/html\", selectText);\r\n            e.clipboardData.setData(\"text/plain\", selectText);\r\n            e.preventDefault();\r\n        }\r\n\r\n        document.addEventListener(\"copy\", listener);\r\n        document.execCommand(\"copy\");\r\n        document.removeEventListener(\"copy\", listener);\r\n        Alert.info('Copied Citations to Clipboard');\r\n    };\r\n\r\n    // Check if citation has all source fields present\r\n    // Displays a Missing! icon if not\r\n    showMissingIcon = (source) => {\r\n\r\n        if (source.title && source.url && source.firstName\r\n            && source.lastName && source.published_date\r\n            && source.site_name && source.access_date) {\r\n            return null;\r\n        } else {\r\n            const citationFields = ['title, ', 'URL, ', 'first name, ', 'last name, ', 'publish date, ', 'site name, ', 'access date, ']\r\n            let missing = \"\"\r\n            if (!source.title) {\r\n                missing = missing.concat(citationFields[0])\r\n            }\r\n            if (!source.url) {\r\n                missing = missing.concat(citationFields[1])\r\n            }\r\n            if (!source.firstName) {\r\n                missing = missing.concat(citationFields[2])\r\n            }\r\n            if (!source.lastName) {\r\n                missing = missing.concat(citationFields[3])\r\n            }\r\n            if (!source.published_date) {\r\n                missing = missing.concat(citationFields[4])\r\n            }\r\n            if (!source.site_name) {\r\n                missing = missing.concat(citationFields[5])\r\n            }\r\n            if (!source.access_date) {\r\n                missing = missing.concat(citationFields[6])\r\n            }\r\n            // Remove last comma\r\n            missing = missing.substring(0, missing.length - 2)\r\n            return (\r\n                <Whisper placement=\"top\" trigger=\"hover\"\r\n                         speaker={<Tooltip>This citation is missing the <i>{missing} </i>field(s)</Tooltip>}>\r\n                    <Icon icon=\"exclamation-circle\" style={{color: '#f5a623'}}/>\r\n                </Whisper>\r\n            );\r\n        }\r\n    }\r\n\r\n    // Called when checkbox changed\r\n    // Changes citation is_included field to true or false\r\n    // depending on checked or not\r\n    changeInclusion = (event, checked, source) => {\r\n        event.stopPropagation();\r\n        const endpoint = \"/sources/\" + source.id;\r\n        const body = {\r\n            \"is_included\": checked\r\n        }\r\n        makeHttpRequest(endpoint, \"PATCH\", body);\r\n        let disSources = this.state.sources;\r\n        let allSources = this.state.allSources;\r\n        let subSources = this.state.subSources;\r\n\r\n        const disIndex = disSources ? disSources.findIndex(x => x.id === source.id) : null;\r\n        const allIndex = allSources ? allSources.findIndex(x => x.id === source.id) : null;\r\n        const subIndex = subSources ? subSources.findIndex(x => x.id === source.id) : null;\r\n\r\n        if (disSources && disIndex !== -1) {\r\n            disSources[disIndex].is_included = checked;\r\n        }\r\n        if (allSources && allIndex !== -1) {\r\n            allSources[allIndex].is_included = checked;\r\n        }\r\n        if (subSources && subIndex !== -1) {\r\n            subSources[subIndex].is_included = checked;\r\n        }\r\n\r\n        this.setState({sources: disSources, allSources: allSources, subSources: subSources});\r\n    }\r\n\r\n    renderAPADate = (date) => {\r\n        const months = this.state.months;\r\n        let formattedDate = \"(\";\r\n        formattedDate = formattedDate + date.getFullYear() + \", \";\r\n        formattedDate = formattedDate + months[date.getMonth()] + \" \";\r\n        formattedDate = formattedDate + (date.getDate() + 1) + \"). \";\r\n        return formattedDate;\r\n    }\r\n\r\n    renderChicagoDate = (date) => {\r\n        const months = this.state.months;\r\n        let formattedDate = months[date.getMonth()] + \" \";\r\n        formattedDate = formattedDate + (date.getDate() + 1) + \", \";\r\n        formattedDate = formattedDate + date.getFullYear() + \".\";\r\n        return formattedDate;\r\n    }\r\n\r\n    renderMLADate = (date) => {\r\n        const months = this.state.months;\r\n        let formattedDate = (date.getDate() + 1) + \" \";\r\n        formattedDate = formattedDate + months[date.getMonth()] + \" \";\r\n        formattedDate = formattedDate + date.getFullYear() + \".\";\r\n        return formattedDate;\r\n    }\r\n\r\n    formatAuthor = (source) => {\r\n        if (source.firstName && source.lastName) {\r\n            return source.lastName + \", \" + source.firstName + \".\";\r\n        }\r\n        return \"\";\r\n    }\r\n\r\n    renderAPACitation = (source) => {\r\n        let formattedDate = \"\";\r\n        let title = \"\";\r\n        let author = \"\";\r\n        let publishDateJS = new Date(source.published_date);\r\n        let accessDateJS = new Date(source.access_date);\r\n        // if published_date is None, use access_date\r\n        if (source.published_date) {\r\n            formattedDate = this.renderAPADate(publishDateJS);\r\n        } else if (source.access_date) {\r\n            formattedDate = this.renderAPADate(accessDateJS);\r\n        }\r\n        if (source.title) {\r\n            title = title + source.title + \".\";\r\n        }\r\n        author = this.formatAuthor(source);\r\n        return (\r\n            <p className={this.isIncludedClassName(source.is_included)}>{author} {formattedDate}\r\n                <i>{title}</i> {source.site_name !== \"\" ? source.site_name + \".\" : \"\"}\r\n                <a href={source.url} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                    {source.url}.</a>\r\n            </p>\r\n        );\r\n    }\r\n\r\n    renderChicagoCitation = (source) => {\r\n        let formattedDate = \"\";\r\n        let title = \"\";\r\n        let author = \"\";\r\n        let publishDateJS = new Date(source.published_date);\r\n        let accessDateJS = new Date(source.access_date);\r\n        // if publishDate None, use accessDate\r\n        if (source.published_date) {\r\n            formattedDate = this.renderChicagoDate(publishDateJS);\r\n        } else if (source.access_date) {\r\n            formattedDate = this.renderChicagoDate(accessDateJS);\r\n        }\r\n        if (source.title) {\r\n            title = title + \"\\\"\" + source.title + \".\\\"\";\r\n        }\r\n        author = this.formatAuthor(source);\r\n        return (\r\n            <p className={this.isIncludedClassName(source.is_included)}>{author} {title}\r\n                <i>{source.site_name}</i>, {formattedDate} <a href={source.url} target=\"_blank\"\r\n                                                              rel=\"noopener noreferrer\">\r\n                    {source.url}.</a>\r\n            </p>\r\n        );\r\n    }\r\n\r\n    renderMLACitation = (source) => {\r\n        let formattedPublishDate = \"\";\r\n        let formattedAccessDate = \"\";\r\n        let title = \"\";\r\n        let author = \"\";\r\n        let publishDateJS = new Date(source.published_date);\r\n        let accessDateJS = new Date(source.access_date);\r\n        if (source.published_date) {\r\n            formattedPublishDate = this.renderMLADate(publishDateJS);\r\n        }\r\n        if (source.access_date) {\r\n            formattedAccessDate = \"Accessed \" + this.renderMLADate(accessDateJS);\r\n        }\r\n        if (source.title) {\r\n            title = title + \"\\\"\" + source.title + \".\\\"\";\r\n        }\r\n        author = this.formatAuthor(source);\r\n        return (\r\n            <p style={{maxWidth: \"800px\"}} className={this.isIncludedClassName(source.is_included)}>\r\n                {author} {title}\r\n                <i>{source.site_name !==\"\" ? source.site_name + \", \" : \"\"}</i>\r\n                 {formattedPublishDate} \r\n                 <a href={source.url} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                     {\" \" + source.url}.\r\n                </a> {formattedAccessDate}\r\n            </p>\r\n        );\r\n    }\r\n\r\n    // Renders citation in APA, MLA, or Chicago format\r\n    // source.access_date and source.published_date are in string form\r\n    // Use JSON Date() object to parse\r\n    renderFormatType = (source) => {\r\n        let citation = null;\r\n        if (this.state.curFormat === this.state.formats.APA) {\r\n            citation = this.renderAPACitation(source);\r\n        } else if (this.state.curFormat === this.state.formats.CHI) {\r\n            citation = this.renderChicagoCitation(source);\r\n        } else if (this.state.curFormat === this.state.formats.MLA) {\r\n            citation = this.renderMLACitation(source);\r\n        }\r\n\r\n        return citation;\r\n    }\r\n\r\n    // Sets className to copyText if citation is included to copy to clipboard\r\n    // Else sets className to undefined\r\n    isIncludedClassName = (included) => {\r\n        if (included) {\r\n            return 'copyText';\r\n        } else {\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    // Keeps track if Bibliography Generation Button clicked and Window should open\r\n    setEditSource = (source) => {\r\n        this.setState({\r\n            editSource: source\r\n        });\r\n    }\r\n\r\n    // Change the citation format when format selection is changed\r\n    changeFormatType = (value) => {\r\n        this.setState({\r\n            curFormat: value\r\n        });\r\n    }\r\n\r\n    renderCitations = (included) => {\r\n        return this.state.sources.map((source, index) => {\r\n            if (source.is_included === included) {\r\n                return (\r\n                    <Checkbox defaultChecked={included} style={included ? null : {color: \"#d3d3d3\"}}\r\n                              onChange={(_, checked, event) => this.changeInclusion(event, checked, source)}\r\n                              key={index}>\r\n                        <FlexboxGrid align=\"middle\" justify=\"space-between\">\r\n                            <FlexboxGridItem colspan={18}>\r\n                                {this.renderFormatType(source)}\r\n                            </FlexboxGridItem>\r\n                            <FlexboxGridItem>\r\n                                <EditCitationButton source={source} setEditSource={this.setEditSource}/>\r\n                                {this.showMissingIcon(source)}\r\n                            </FlexboxGridItem>\r\n                        </FlexboxGrid>\r\n                    </Checkbox>\r\n                );\r\n            }\r\n            return null;\r\n        })\r\n    }\r\n\r\n    renderBibBody = () => {\r\n        if (this.state.loading) return <Placeholder.Paragraph rows={4} active/>\r\n\r\n        return (\r\n            <CheckboxGroup name=\"checkboxList\">\r\n                {this.renderCitations(true)}\r\n                <Divider/>\r\n                {this.renderCitations(false)}\r\n            </CheckboxGroup>\r\n        );\r\n    }\r\n\r\n    toggleClusterBib = (checked) => {\r\n        if (checked) {\r\n            this.setState({sources: this.state.subSources});\r\n        } else {\r\n            this.setState({sources: this.state.allSources})\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (prevProps.showBib !== this.props.showBib && this.props.showBib) {\r\n            this.getBibSources();\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getBibSources();\r\n    }\r\n\r\n    render() {\r\n        const formats = this.state.formats;\r\n        const dropdownData = [{\r\n            value: formats.APA,\r\n            label: formats.APA\r\n        }, {\r\n            value: formats.MLA,\r\n            label: formats.MLA\r\n        }, {\r\n            value: formats.CHI,\r\n            label: formats.CHI\r\n        }]\r\n        if (this.state.sources === null && !this.state.loading) return null;\r\n\r\n        return (\r\n            <Modal full show={this.props.showBib} onHide={() => this.props.setShowBib(false)}>\r\n                <Modal.Header style={{marginRight: \"5%\"}}>\r\n                    <Modal.Title>\r\n                        <span style={{marginRight: 5}}>Bibliography</span>\r\n                        <Whisper preventOverflow trigger=\"hover\" speaker={<Tooltip>Copy to Clipboard</Tooltip>}\r\n                                 placement=\"top\">\r\n                            <IconButton onClick={this.copyBib} icon={<Icon icon=\"copy\"/>} size=\"sm\"/>\r\n                        </Whisper>\r\n                        <SelectPicker defaultValue={this.state.curFormat ? this.state.curFormat : formats.APA}\r\n                                      data={dropdownData} onChange={this.changeFormatType}\r\n                                      style={{float: 'right'}} cleanable={false} searchable={false}/>\r\n                        <Toggle unCheckedChildren={<div style={{color: '#3498FF'}}> all </div>} checkedChildren={'cluster'} size='lg'\r\n                                      style={{float: 'middle'}} onChange={this.toggleClusterBib}/>\r\n                    </Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body >\r\n                    {this.renderBibBody()}\r\n                </Modal.Body>\r\n                <EditWindow close={() => this.setEditSource(null)} source={this.state.editSource}\r\n                            getBibSources={this.getBibSources}/>\r\n            </Modal>\r\n        );\r\n    }\r\n}\r\n\r\nclass EditCitationButton extends React.Component {\r\n    render() {\r\n        const buttonSize = \"xs\";\r\n        return (\r\n            <Whisper preventOverflow trigger=\"hover\" speaker={<Tooltip>Edit Citation Fields</Tooltip>} placement=\"top\">\r\n                <IconButton icon={<Icon icon=\"edit2\"/>} size={buttonSize}\r\n                            onClick={() => this.props.setEditSource(this.props.source)}/>\r\n            </Whisper>\r\n        );\r\n    }\r\n}\r\n\r\nclass EditWindow extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            loading: false,\r\n            formValue: {\r\n                firstName: this.showField(props.source, \"firstName\"),\r\n                lastName: this.showField(props.source, \"lastName\"),\r\n                title: this.showField(props.source, \"title\"),\r\n                publishDate: this.showField(props.source, \"published_date\", true),\r\n                siteName: this.showField(props.source, \"site_name\"),\r\n                accessDate: this.showField(props.source, \"access_date\", true),\r\n                url: this.showField(props.source, \"url\")\r\n            }\r\n        }\r\n    }\r\n\r\n    setFormValue = (value) => {\r\n        this.setState({formValue: value});\r\n    }\r\n\r\n    // Show loading when saving citation info\r\n    setLoading = (value) => {\r\n        this.setState({loading: value});\r\n    }\r\n\r\n    showField = (source, field, isDatePicker = false) => {\r\n        const emptyResponse = isDatePicker ? null : \"\";\r\n        if (!source) return emptyResponse;\r\n        const val = source[field]\r\n        if (val) {\r\n            return isDatePicker ? new Date(val) : val;\r\n        } else {\r\n            return emptyResponse;\r\n        }\r\n    }\r\n\r\n    // Makes API call to update citation info\r\n    saveInfo = async () => {\r\n        this.setLoading(true);\r\n        const endpoint = \"/sources/\" + this.props.source.id;\r\n        const body = {\r\n            \"author\": this.state.formValue.lastName && this.state.formValue.firstName ?\r\n                this.state.formValue.lastName + \", \" + this.state.formValue.firstName : \"\",\r\n            \"title\": this.state.formValue.title,\r\n            \"published_date\": this.state.formValue.publishDate,\r\n            \"site_name\": this.state.formValue.siteName,\r\n            \"access_date\": this.state.formValue.accessDate,\r\n            \"url\": this.state.formValue.url\r\n        }\r\n        await makeHttpRequest(endpoint, \"PATCH\", body);\r\n        this.props.getBibSources(() => {\r\n            this.props.close();\r\n            this.setLoading(false);\r\n        });\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (prevProps.source !== this.props.source) {\r\n            this.setFormValue({\r\n                firstName: this.showField(this.props.source, \"firstName\"),\r\n                lastName: this.showField(this.props.source, \"lastName\"),\r\n                title: this.showField(this.props.source, \"title\"),\r\n                publishDate: this.showField(this.props.source, \"published_date\", true),\r\n                siteName: this.showField(this.props.source, \"site_name\"),\r\n                accessDate: this.showField(this.props.source, \"access_date\", true),\r\n                url: this.showField(this.props.source, \"url\")\r\n            })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const source = this.props.source;\r\n        if (source === null) return null;\r\n        const dateFormat = \"MM-DD-YYYY\";\r\n        return (\r\n            <Modal size=\"sm\" show onHide={this.props.close}>\r\n                <Modal.Header>\r\n                    <Modal.Title>\r\n                        Edit Citation Fields\r\n                    </Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <Form layout=\"horizontal\"\r\n                          onChange={this.setFormValue}\r\n                          formValue={this.state.formValue}>\r\n                        <Form layout=\"inline\"\r\n                              onChange={this.setFormValue}\r\n                              formValue={this.state.formValue}>\r\n                            <FormGroup>\r\n                                <ControlLabel style={{alignContent: 'center'}}>Author</ControlLabel>\r\n                                <FormControl placeholder=\"First Name\" name=\"firstName\" style={{ width: 140}}/>\r\n                                <FormControl placeholder=\"Last Name\" name=\"lastName\" style={{ width: 140}}/>\r\n                            </FormGroup>\r\n                        </Form>\r\n\r\n                        <FormGroup>\r\n                            <ControlLabel>Title</ControlLabel>\r\n                            <FormControl name=\"title\"/>\r\n                        </FormGroup>\r\n\r\n                        <FormGroup>\r\n                            <ControlLabel>Publish Date</ControlLabel>\r\n                            <FormControl\r\n                                name=\"publishDate\"\r\n                                accepter={DatePicker}\r\n                                format={dateFormat}\r\n                                oneTap\r\n                            />\r\n                        </FormGroup>\r\n\r\n                        <FormGroup>\r\n                            <ControlLabel>Site Name</ControlLabel>\r\n                            <FormControl name=\"siteName\"/>\r\n                        </FormGroup>\r\n\r\n                        <FormGroup>\r\n                            <ControlLabel>Access Date</ControlLabel>\r\n                            <FormControl\r\n                                name=\"accessDate\"\r\n                                accepter={DatePicker}\r\n                                format={dateFormat}\r\n                                oneTap\r\n                            />\r\n                        </FormGroup>\r\n\r\n                        <FormGroup>\r\n                            <ControlLabel>URL</ControlLabel>\r\n                            <FormControl name=\"url\"/>\r\n                        </FormGroup>\r\n                    </Form>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button onClick={this.saveInfo} loading={this.state.loading}>Save</Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        );\r\n    }\r\n}\r\n\r\nexport default BibWindow;","import React from \"react\";\r\nimport {Table, Modal, Form, Input, Button} from 'rsuite';\r\nimport makeHttpRequest from \"../services/HttpRequest\";\r\n\r\nconst {Column, HeaderCell, Cell} = Table;\r\n\r\n\r\n// const data = [{ name: 'foobar', email: 'foobar@xxx.com', role: \"Owner\" }, { name: 'boofar', email: 'boofar@xxx.com', role: \"Collaborator\" }];\r\n\r\nclass SharedProject extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            userInputId: \"user-input-id\",\r\n            loading: false\r\n        }\r\n    }\r\n\r\n    saveUser = async () => {\r\n        this.setLoading(true);\r\n        const email = document.getElementById(this.state.userInputId).value.trim();\r\n\r\n        const body = {\r\n            \"shared_proj\": this.props.curProject.id,\r\n            \"email\": email,\r\n            \"role\": \"Collaborator\"\r\n        }\r\n        const endpoint = \"/shared_projects\";\r\n        await makeHttpRequest(endpoint, 'POST', body);\r\n        this.props.updateProjects();\r\n    }\r\n\r\n    setLoading = (val) => {\r\n        this.setState({loading: val})\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (prevProps.curProject !== this.props.curProject && this.props.showSharedProject) {\r\n            this.setLoading(false);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.curProject) {\r\n            return null;\r\n        }\r\n        return (\r\n            <Modal show={this.props.showSharedProject} onHide={() => this.props.setShowSharedProject(false)}>\r\n                <Modal.Header>\r\n                    <Modal.Title>\r\n                        Shared settings for {this.props.curProject.title}\r\n                    </Modal.Title>\r\n                </Modal.Header>\r\n                <Form onSubmit={this.saveUser}>\r\n                    <Modal.Body>\r\n                        <Table data={this.props.curProject.shared_users}>\r\n                            <Column width={200} fixed>\r\n                                <HeaderCell>Name</HeaderCell>\r\n                                <Cell dataKey=\"name\"/>\r\n                            </Column>\r\n                            <Column width={200}>\r\n                                <HeaderCell>Email</HeaderCell>\r\n                                <Cell dataKey=\"email\"/>\r\n                            </Column>\r\n                            <Column width={200}>\r\n                                <HeaderCell>Role</HeaderCell>\r\n                                <Cell dataKey=\"role\"/>\r\n                            </Column>\r\n                        </Table>\r\n                        <Input style={{marginRight: 10}} placeholder=\"Type email you want to share project with\"\r\n                               id={this.state.userInputId} autoFocus required componentClass=\"textarea\" rows={30}/>\r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n                        <Button type=\"submit\" loading={this.state.loading} appearance=\"primary\">\r\n                            Save\r\n                        </Button>\r\n                    </Modal.Footer>\r\n                </Form>\r\n            </Modal>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SharedProject;","/**\r\n * Returns n random elements from an array.\r\n * @param array\r\n * @param n\r\n * @returns {List}\r\n */\r\nexport const randomPicker = (array, n) => {\r\n    // Shuffle array\r\n    const sources = array;\r\n    for (let i = sources.length - 1; i > 0; i--) {\r\n        const j = Math.floor(Math.random() * (i + 1));\r\n        [sources[i], sources[j]] = [sources[j], sources[i]]\r\n    }\r\n\r\n    // Get subarray of first n sources\r\n    return sources.slice(0, n);\r\n};","import React from 'react';\r\nimport {\r\n    Button, Progress, Grid\r\n} from \"rsuite\";\r\n\r\nimport {randomPicker} from \"../../services/RandomGenerator\"\r\n\r\nconst {Line} = Progress;\r\n\r\nclass OddOnesOut extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            randomItems: this.getRandomItems(),\r\n            numPlayed: 0,\r\n            selectedItems: [],\r\n            // placement: 'right',\r\n            show: true\r\n        }\r\n    }\r\n\r\n    // Randomly select 4 items\r\n    getRandomItems = () => {\r\n        return randomPicker(this.props.items, 4);\r\n    }\r\n\r\n    updateRandomItems = () => {\r\n        this.setState({\r\n            randomItems: this.getRandomItems(),\r\n            // placement: 'right' // need to reset\r\n            show: !this.state.show\r\n            // show: false\r\n        })\r\n        console.log('show is false')\r\n        console.log(this.state.show)\r\n    }\r\n\r\n    chooseItem = (item) => {\r\n        // console.log(item)\r\n        this.setState({\r\n            numPlayed: this.state.numPlayed + 1,\r\n            selectedItems: [...this.state.selectedItems, item],\r\n            // placement: 'left',\r\n            show: !this.state.show\r\n            // show: true\r\n        }, this.updateRandomItems)\r\n        // console.log(this.state.selectedItems)\r\n        // console.log(this.state.numPlayed)\r\n        console.log('animation should show')\r\n        console.log(this.state.show)\r\n    }\r\n\r\n    render() {\r\n        // console.log(this.state)\r\n        if (this.state.numPlayed < this.props.numRounds) {\r\n            return (\r\n                <Grid>\r\n                    <h1>OddOnesOut</h1>\r\n                    <h3>Round {this.state.numPlayed + 1}</h3>\r\n                    <Line percent={this.state.numPlayed / 5 * 100} status='active'/>\r\n                    <h5>Select the odd one out!</h5>\r\n\r\n                    {/* Need to figure out how to make animation persist? Disappear and then reappear? */}\r\n\r\n                    {/* <AnimatedButton item='test' index='test2'\r\n                        show={this.state.show} \r\n                        placement={this.state.placement} \r\n                        chooseItem= {this.chooseItem}\r\n                        ></AnimatedButton> */}\r\n                    {/* {this.state.RandomItems.map((item, index) =>\r\n                        <AnimatedButton item={item} index={index}/>)} */}\r\n\r\n                    {this.state.randomItems.map((item, index) => {\r\n                        console.log(this.props.color(item));\r\n                        return (\r\n                            <Button block key={index} appearance=\"primary\" color={this.props.color(item)}\r\n                                style={{margin: 20, display: 'block'}}\r\n                                onClick={() => this.chooseItem(item)}>{this.props.generateDisplayValue(item)}</Button>)}\r\n                        )\r\n                        \r\n                    }\r\n                        \r\n\r\n                    {/* <ul>\r\n                    {this.state.RandomItems.map((item, index) => <li key={index}>{item.title},{item.url}</li>)}\r\n                </ul> */}\r\n                </Grid>\r\n            )           \r\n        } else {\r\n            return (\r\n                <>\r\n                    <h1>OddOnesOut</h1>\r\n                    <h3>Well Done!</h3>\r\n                    <h5>Hope you found some inspirations to explore more!</h5>\r\n                    <h5>Here are your selected items:</h5>\r\n\r\n                    {this.state.selectedItems.map((item, index) =>\r\n                        <Button block key={index} appearance=\"primary\" color={item.color}\r\n                                style={{margin: 20, display: 'block'}}>{this.props.generateDisplayValue(item)}</Button>)}\r\n                </>\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nexport default OddOnesOut;\r\n","import React from 'react';\r\nimport {\r\n    Button, Progress, Input, Form, Grid, Row\r\n} from \"rsuite\";\r\n\r\nimport {randomPicker} from \"../../services/RandomGenerator\"\r\n\r\nconst {Line} = Progress;\r\n\r\nclass FindCommonality extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            randomItems: this.getRandomItems(),\r\n            numPlayed: 0,\r\n            commonality: [],\r\n            commonId: 'common-Id'\r\n        }\r\n    }\r\n\r\n    // Randomly select 2 items\r\n    getRandomItems = () => {\r\n        return randomPicker(this.props.items, 2);\r\n    }\r\n\r\n    updateRandomItems = () => {\r\n        this.setState({\r\n            randomItems: this.getRandomItems(),\r\n        })\r\n    }\r\n\r\n    submitCommon = () => {\r\n        let textarea = document.getElementById(this.state.commonId);\r\n        // console.log(textarea.value);\r\n        this.setState({\r\n            numPlayed: this.state.numPlayed + 1,\r\n            commonality: [...this.state.commonality, textarea.value],\r\n        }, this.updateRandomItems)\r\n        // Clear text area\r\n        textarea.value = \"\";\r\n    }\r\n\r\n    render() {\r\n        if (this.state.numPlayed < this.props.numRounds)\r\n            return (\r\n                <>\r\n                                    \r\n                    <Grid>\r\n                        <Row>\r\n                            <h1>What comes to mind?</h1>\r\n                            <h3>Round {this.state.numPlayed + 1}</h3>\r\n                        </Row>\r\n                        <Row>\r\n                            <Line percent={this.state.numPlayed / 5 * 100} status='active'/>\r\n                        </Row>\r\n                        <Row style={{marginTop: \"10px\"}}>\r\n                            <h5>What is the commonality between the following?</h5>\r\n                        </Row>\r\n                        {this.state.randomItems.map((item, index) =>\r\n                            <Row style={{marginTop: \"20px\"}}>\r\n                                <Button block key={index} appearance=\"primary\" color='blue'\r\n                                        style={{display: 'block'}}>{this.props.generateDisplayValue(item)}</Button>\r\n                            </Row>\r\n                            )}\r\n                        <Row style={{marginTop: \"20px\"}}>                            \r\n                            <Form onSubmit={this.submitCommon}>\r\n                                <Input autoFocus type=\"text\" required componentClass=\"textarea\" id={this.state.commonId}\r\n                                    rows={5} placeholder=\"Write your thoughts here...\"/>\r\n                                <Button appearance=\"primary\" color='blue'\r\n                                        style={{display: 'block', marginTop: \"20px\"}}\r\n                                        type='submit'>Next</Button>\r\n\r\n                            </Form>\r\n                        </Row>  \r\n                    </Grid>\r\n                </>\r\n            )\r\n        else {\r\n            return (\r\n                <>\r\n                    <h1>What comes to mind?</h1>\r\n                    <h3>Well Done!</h3>\r\n                    <h5>Hope you found some inspirations to explore more!</h5>\r\n                    <h5>Here are the common themes you have identified:</h5>\r\n                    <ul>\r\n                        {this.state.commonality.map((common, index) => <li key={index}>{common}</li>)}\r\n                    </ul>\r\n\r\n                    {/* {this.state.selectedItems.map((item, index) =>\r\n                        <Button block key={index} appearance=\"primary\" color='blue' style={{ margin: 20, display: 'block'}}>{item.title}</Button>)} */}\r\n                </>\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nexport default FindCommonality;\r\n","import React from 'react';\r\nimport {\r\n    Button, Progress, Divider, Grid\r\n} from \"rsuite\";\r\nimport {Network, DataSet} from \"vis-network/standalone\";\r\n\r\n\r\nimport {randomPicker} from \"../../services/RandomGenerator\"\r\n\r\nconst {Line} = Progress;\r\n\r\nclass MakePairs extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            randomItems: this.getRandomItems(),\r\n            numPlayed: 0,\r\n            // numRounds: 5,\r\n            connections: [],\r\n            network: null,\r\n            visNodes: null,\r\n            visEdges: null,\r\n            selectedNode: null,\r\n            items: null,\r\n            loading: false,\r\n            pairCount: 0\r\n        }\r\n        console.log(\"numRounds\", this.props.numRounds)\r\n    }\r\n\r\n    // Helper function to setup the nodes and edges for the graph\r\n    createNodesAndEdges() {\r\n        let nodes = new DataSet();\r\n        let edges = new DataSet();\r\n        // Iterate through each node in the graph and build the arrays of nodes and edges\r\n        for (let index in this.state.randomItems) {\r\n            let node = this.state.randomItems[index];\r\n            // Positions should be fixed \r\n            // [0] [1]\r\n            // [2] [3]\r\n            let x_position = (index % 2) ? 0 : 500;\r\n            let y_position = (index < 2) ? 0 : 200;\r\n\r\n            nodes.add({id: node.id, label: this.props.generateDisplayValue(node), x: x_position, y: y_position});\r\n            // // Deal with positions\r\n            // if (node.x_position === null || node.y_position === null) {\r\n            //     // If position is still undefined, generate random x and y in interval [-300, 300]\r\n            //     const [x, y] = this.generateNodePositions(node);\r\n            //     this.updateItemPosition(node.id, x, y);\r\n            //     nodes.add({ id: node.id, label: node.title, x: x, y: y });\r\n            // } else {\r\n            //     nodes.add({ id: node.id, label: node.title, x: node.x_position, y: node.y_position });\r\n            // }\r\n            // // Deal with edges\r\n            // for (let nextIndex in node.next_items) {\r\n            //     const nextId = node.next_items[nextIndex];\r\n            //     edges.add({ from: node.id, to: nextId })\r\n            // }\r\n        }\r\n        this.setState({visNodes: nodes, visEdges: edges});\r\n        return [nodes, edges];\r\n    }\r\n\r\n\r\n    renderNetwork = (callback) => {\r\n        if (this.props.curProject === null) return;\r\n\r\n        // this.getItems(() => {\r\n        // TODO?\r\n        const [nodes, edges] = this.createNodesAndEdges();\r\n\r\n        // create a network\r\n        const container = document.getElementById('MakePairs');\r\n\r\n        // provide the data in the vis format\r\n        const data = {\r\n            nodes: nodes,\r\n            edges: edges\r\n        };\r\n        const options = {\r\n            nodes: {\r\n                shape: \"box\",\r\n                size: 16,\r\n                margin: 10,\r\n                physics: false,\r\n                chosen: false,\r\n                font: {\r\n                    face: \"Apple-System\",\r\n                    color: \"white\"\r\n                },\r\n                color: {\r\n                    background: getComputedStyle(document.querySelector(\".rs-btn-primary\"))[\"background-color\"]\r\n                },\r\n                widthConstraint: {\r\n                    maximum: 500\r\n                }\r\n            },\r\n            edges: {\r\n                // arrows: {\r\n                //     to: {\r\n                //         enabled: true\r\n                //     }\r\n                // },\r\n                color: \"black\",\r\n                physics: false,\r\n                smooth: false,\r\n                hoverWidth: 0\r\n            },\r\n            interaction: {\r\n                selectConnectedEdges: false,\r\n                hover: true,\r\n                hoverConnectedEdges: false,\r\n                zoomView: false,\r\n                dragView: false\r\n            },\r\n            manipulation: {\r\n                enabled: false,\r\n                // TODO\r\n                addEdge: (data, callback) => {\r\n                    console.log('add edge', data);\r\n                    if (data.from !== data.to) {\r\n                        callback(data);\r\n                        this.addEdgeConnection(data.from, data.to);\r\n                    }\r\n                    // after each adding you will be back to addEdge mode\r\n                    network.addEdgeMode();\r\n                }\r\n            }\r\n        };\r\n\r\n        console.log(\"container\", container, \"data\", data)\r\n        // Initialize the network -- TODO: WHEN REFACTORING, CHANGE DATA and OPTIONS\r\n        const network = new Network(container, data, options);\r\n        network.addEdgeMode();\r\n        network.fit()\r\n\r\n        // Handle click vs drag\r\n        // network.on(\"click\", (params) => {\r\n        //     if (params.nodes !== undefined && params.nodes.length > 0) {\r\n        //         const nodeId = params.nodes[0];\r\n        //         // console.log(\"PARAM NODES:\", params.nodes);\r\n        //         // this.handleClickedNode(nodeId);\r\n        //         // console.log(\"nodeId\", nodeId);\r\n        //         if (this.state.from_id === null || this.state.from_id === nodeId) {\r\n        //             this.setState({from_id: nodeId});\r\n        //         } else {\r\n        //             this.addEdgeConnection(this.state.from_id, nodeId); // Node Id will be to!\r\n        //             this.setState({from_id: null});\r\n        //         }\r\n        //         // Network.addEdgeMode();\r\n        //     }\r\n        // });\r\n\r\n        // // Update positions after dragging node\r\n        // network.on(\"dragEnd\", () => {\r\n        //     // Only update positions if there is a selected node\r\n        //     if (network.getSelectedNodes().length !== 0) {\r\n        //         const id = network.getSelectedNodes()[0];\r\n        //         const position = network.getPosition(id);\r\n        //         const x = position.x;\r\n        //         const y = position.y;\r\n        //         this.updateItemPosition(id, x, y);\r\n        //     }\r\n        // });\r\n\r\n        // Set cursor to pointer when hovering over a node\r\n        network.on(\"hoverNode\", () => network.canvas.body.container.style.cursor = \"pointer\");\r\n        network.on(\"blurNode\", () => network.canvas.body.container.style.cursor = \"default\");\r\n\r\n        // Store the network\r\n        this.setState({network: network}, callback);\r\n\r\n    }\r\n\r\n    addEdgeConnection = (from_id, to_id) => {\r\n        let pairCountCurr = this.state.pairCount + 1;\r\n        this.state.network.body.data.edges.add([{from: from_id, to: to_id}])\r\n        // Add connections to state\r\n        const fromLabel = this.state.network.body.data.nodes.get(from_id).label;\r\n        const toLabel = this.state.network.body.data.nodes.get(to_id).label;\r\n        // console.log(\"from\", fromLabel)\r\n        // console.log(\"to\", toLabel)\r\n        this.setState({\r\n            connections: [...this.state.connections, {from: fromLabel, to: toLabel}],\r\n            pairCount: pairCountCurr\r\n        }, () => {\r\n            if (this.state.pairCount === 2) {\r\n                this.submitItems();\r\n            }\r\n        })\r\n    }\r\n\r\n    // Randomly select 4 items\r\n    getRandomItems = () => {\r\n        return randomPicker(this.props.items, 4);\r\n    }\r\n\r\n    updateRandomItems = () => {\r\n        this.setState({\r\n            randomItems: this.getRandomItems(),\r\n        })\r\n    }\r\n\r\n    submitItems = () => {\r\n        console.log(\"network\", this.state.network);\r\n        this.setState({\r\n            numPlayed: this.state.numPlayed + 1,\r\n            pairCount: 0\r\n        }, this.updateRandomItems)\r\n        if (this.state.numPlayed < this.props.numRounds)\r\n            this.renderNetwork();\r\n    }\r\n\r\n    componentDidMount() {\r\n        // const container = document.getElementById('MakePairs');\r\n        // console.log(container)\r\n        this.renderNetwork();\r\n    }\r\n\r\n    render() {\r\n        if (this.state.numPlayed < this.props.numRounds)\r\n            return (\r\n                <Grid>\r\n                    <h1>Make Pairs</h1>\r\n                    <h3>Round {this.state.numPlayed + 1}</h3>\r\n                    <Line percent={this.state.numPlayed / 5 * 100} status='active'/>\r\n                    <div id='MakePairs' style={{height: 300}}/>\r\n                    {/* <div id='MakePairs'>  */}\r\n                    {/* <Form onSubmit={this.submitItems}>\r\n                        <Button appearance=\"primary\" color='blue'\r\n                                style={{margin: 20, display: 'block'}}\r\n                                type='submit'>Next</Button>\r\n                    </Form> */}\r\n\r\n                </Grid>\r\n            )\r\n        else {\r\n            return (\r\n                <>\r\n                    <h1>Make Pairs</h1>\r\n                    <h3>Well Done!</h3>\r\n                    <h5>Hope you found some inspirations to explore more!</h5>\r\n                    <h5>Here are the connections you have identified:</h5>\r\n                    {this.state.connections.slice(1, this.state.connections.length).map((connection, index) => [\r\n                        <Button key={index} appearance=\"primary\" color='blue'\r\n                                style={{margin: 20}}>{connection.from}</Button>,\r\n                        // <Button key={index} appearance=\"primary\" color='blue' style={{ margin: 20, display: 'block' }}>{connection.from}</Button>,\r\n                        // <p key={index + 50}>is related to</p>,\r\n                        <Divider key={index + 50}>is related to</Divider>,\r\n                        <Button key={index + 100} appearance=\"primary\" color='blue'\r\n                                style={{margin: 20}}>{connection.to}</Button>,\r\n                        <Divider key={index + 200}/>])}\r\n                </>\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nexport default MakePairs;\r\n","import React from \"react\";\r\nimport {\r\n    Modal\r\n} from \"rsuite\";\r\n\r\nclass GameWindow extends React.Component {\r\n    render() {\r\n        // TODO: Not checking if undefined? Does not work on empty projects?\r\n        if (this.props.sources === null) return null;\r\n        \r\n        // console.log(this.state.selectedGame)\r\n        return (\r\n            <div id='GameWindow'>\r\n            <Modal full show={this.props.showGame} onHide={() => this.props.setShowGame(false)}>\r\n                <Modal.Header>\r\n                    <Modal.Title>\r\n                        MiniGames\r\n                    </Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    {this.props.selectedGame}\r\n                </Modal.Body>\r\n            </Modal>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default GameWindow;","import React from 'react';\r\nimport {\r\n    Tooltip, Whisper, Icon, IconButton\r\n} from \"rsuite\";\r\n\r\n// Import all minigames\r\nimport OddOnesOut from \"./minigames/OddOnesOut\";\r\nimport FindCommonality from \"./minigames/FindCommonality\";\r\nimport MakePairs from \"./minigames/MakePairs\";\r\n\r\n// Import Game window\r\nimport GameWindow from \"./MiniGameWindow\"\r\n\r\nclass MiniGames extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        // Cannot define the games as a state here due to lack of update\r\n        this.state = {\r\n            loading: false,\r\n            selectedGame: null,\r\n            numRounds: 5\r\n        }\r\n    }\r\n\r\n    randomizer = () => {\r\n        this.setState({\r\n            selectedGame: this.state.games[Math.floor(Math.random() *\r\n                this.state.games.length)],\r\n            numRounds: Math.ceil(Math.random() * 6)\r\n        })\r\n    }\r\n\r\n    generateDisplayValue = (item) => item.title ? item.title : item.content;\r\n\r\n    updateGames = () => {\r\n        console.log(\"num items\", this.props.items.length);\r\n        const validGames = [];\r\n        // Have different length boundaries for different games\r\n        const customProps = {\r\n            items: this.props.items,\r\n            numRounds: this.state.numRounds,\r\n            generateDisplayValue: this.generateDisplayValue,\r\n            color: this.props.color\r\n        }\r\n        validGames.push(<OddOnesOut {...customProps}/>);\r\n        validGames.push(<FindCommonality {...customProps}/>);\r\n        if (this.props.items.length > 4) {\r\n            validGames.push(<MakePairs {...customProps}/>);\r\n        }\r\n        // Games need to be loaded here to have the most recent items, randomizer needs to be called after the games is updated\r\n        this.setState({games: validGames}, this.randomizer)\r\n    }\r\n\r\n    setShowGame = (clicked) => {\r\n        // Keeps track if Game Generation Button clicked and Window should open\r\n        if (this.props.network) { // Check that the network exists\r\n            this.setState({\r\n                showGame: clicked\r\n            });\r\n        }\r\n    }\r\n\r\n    handleClick = () => {\r\n        this.setShowGame(true);\r\n        this.updateGames();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <GameWindow showGame={this.state.showGame}\r\n                            setShowGame={this.setShowGame} items={this.props.items}\r\n                            selectedGame={this.state.selectedGame}/>\r\n                <Whisper preventOverflow trigger=\"hover\" speaker={<Tooltip>Minigames</Tooltip>}\r\n                         placement=\"topEnd\">\r\n                    <IconButton appearance=\"primary\" icon={<Icon icon=\"gamepad\"/>} circle\r\n                                size=\"lg\" onClick={this.handleClick}\r\n                                style={{\r\n                                    top: '50%',\r\n                                    position: \"absolute\",\r\n                                    right: 5,\r\n                                    zIndex: 1\r\n                                }}/>\r\n                </Whisper>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MiniGames;","import React from \"react\";\r\n\r\nimport makeHttpRequest from \"../services/HttpRequest\";\r\n\r\nclass RaiseLevelButton extends React.Component {\r\n    buttonAction = () => {\r\n        const cur = this.props.curClusterView;\r\n        if (cur.parent_cluster === null) this.props.setCurClusterView(null);\r\n        else {\r\n            const endpoint = \"/clusters/\" + this.props.curClusterView.parent_cluster;\r\n            makeHttpRequest(endpoint).then(response => {\r\n                this.props.setCurClusterView(response.body.cluster);\r\n            })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const divStyle = {\r\n            display: 'block',\r\n            width: '100px',\r\n            height: '100px',\r\n            borderStyle: 'solid',\r\n            borderWidth: '0 0 150px 150px', /* adjust for size of triangle */\r\n            borderColor: 'transparent transparent transparent #3498FF',\r\n            position: 'fixed',\r\n            top: 55,\r\n            left: 0,\r\n            color: 'white',\r\n            cursor: 'pointer'\r\n        }\r\n        const textStyle = {\r\n            position: 'absolute',\r\n            top: '30px',\r\n            width: '80px',\r\n            left: '-140px',\r\n            fontFamily: 'Apple-System',\r\n            transform: 'rotate(-45deg)',\r\n            color: 'white',\r\n            textAlign: 'center',\r\n            display: 'block',\r\n            userSelect: 'none'\r\n        }\r\n\r\n        if (this.props.curClusterView === null) return null;\r\n\r\n        return (\r\n            <div style={divStyle} onClick={this.buttonAction}>\r\n                <span style={textStyle}>\r\n                    To previous level\r\n                </span>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default RaiseLevelButton","import React, {useState} from \"react\";\r\nimport {Whisper, Tooltip, Input, Button} from \"rsuite\";\r\nimport makeHttpRequest from \"../services/HttpRequest\";\r\n\r\nfunction ClusterTitle(props) {\r\n    const [editing, setEditing] = useState(false);\r\n    const [newTitle, setNewTitle] = useState(\"\");\r\n    const [cluster, setCluster] = useState(props.curClusterView);\r\n\r\n    const styles = {\r\n        position: 'absolute',\r\n        top: 5,\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        width: \"100%\",\r\n        fontSize: \"1.5em\"\r\n    }\r\n\r\n    let title = \"\";\r\n    if (cluster !== null) title = cluster.name;\r\n\r\n    const tooltip = (<Tooltip>Click to rename.</Tooltip>)\r\n\r\n    const saveNewTitle = () => {\r\n        const endpoint = \"/clusters/\" + cluster.id;\r\n        const body = {\"name\": newTitle};\r\n        makeHttpRequest(endpoint, \"PATCH\", body).then((res) => {\r\n            props.setCurClusterView(res.body.cluster);\r\n            setEditing(false);\r\n            setCluster(res.body.cluster);\r\n        });\r\n    }\r\n\r\n    if (cluster === null) return null;\r\n    if (!editing) return (\r\n        <Whisper placement=\"bottom\" trigger=\"hover\" speaker={tooltip}>\r\n            <div style={styles} onClick={() => setEditing(true)}>{title}</div>\r\n        </Whisper>\r\n    );\r\n    return (\r\n        <div style={styles}>\r\n            <Input style={{width: 120}} defaultValue={title} autoFocus\r\n                   onBlur={() => setEditing(false)}\r\n                   onInput={e => setNewTitle(e.target.value)}/>\r\n            <Button size=\"xs\" style={{marginLeft: 5}} onMouseDown={e => e.preventDefault()}\r\n                    onClick={() => saveNewTitle()}>Save</Button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ClusterTitle;","export default function isOverlap(rectA, rectB) {\r\n    if (typeof rectA === 'undefined' || typeof rectB === 'undefined') {\r\n        return false;\r\n    }\r\n    else return (rectB.right > rectA.left && rectB.left < rectA.right &&\r\n        rectB.top < rectA.bottom && rectB.bottom > rectA.top);\r\n}","import React from \"react\";\r\nimport {\r\n    Alert, Loader\r\n} from \"rsuite\";\r\nimport {Network, DataSet} from \"vis-network/standalone\";\r\n\r\nimport ItemView from \"./ItemView\";\r\nimport NewItemForm from \"../components/NewItemForm\";\r\nimport NewClusterForm from \"./NewClusterForm\"\r\nimport AppFooter from \"./AppFooter\";\r\nimport BibWindow from \"./BibWindow\";\r\nimport SharedProject from \"./SharedProject\";\r\nimport Minigames from \"./Minigames\";\r\n\r\nimport RaiseLevelButton from \"./RaiseLevelButton.js\"\r\nimport ClusterTitle from \"./ClusterTitle.js\";\r\n\r\nimport makeHttpRequest, {constructHttpQuery} from \"../services/HttpRequest\";\r\n\r\nimport throttle from \"../services/throttle\";\r\nimport isOverlap from \"../services/isOverlap\"\r\n\r\nclass MindMap extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        const modes = {\r\n            NULL: null,\r\n            URL: \"url\",\r\n            NOTES: \"notes\"\r\n        };\r\n        const types = {\r\n            NULL: null,\r\n            PURESOURCE: \"pureSource\",\r\n            SOURCEANDNOTE: \"sourceAndNote\",\r\n            SOURCEANDHIGHLIGHT: \"sourceAndHighlight\",\r\n            PURENOTE: \"pureNote\",\r\n            NEITHER: \"neither\"\r\n        }\r\n        const nodeColors = {\r\n            NULL: null,\r\n            [types.PURESOURCE]: \"#00c0de\",\r\n            [types.SOURCEANDNOTE]: \"#f36170\",\r\n            [types.SOURCEANDHIGHLIGHT]: \"#45c786\",\r\n            [types.PURENOTE]: \"#f5a94b\",\r\n            [types.NEITHER]: \"#000000\"\r\n        };\r\n        this.state = {\r\n            network: null,\r\n            visNodes: null,\r\n            selectedItem: null,\r\n            items: null,\r\n            nonSelectedNodes: null,\r\n            clusters: null,\r\n            loading: false,\r\n            showNewItemForm: false,\r\n            showNewItemHelperMessage: false,\r\n            newItemData: modes.NULL,\r\n            modes: modes,\r\n            newItemFormType: null,\r\n            item: null,\r\n            types: types,\r\n            nodeColors: nodeColors,\r\n            showColor: nodeColors.NULL,\r\n            showNewClusterForm: false,\r\n            showNewClusterHelperMessage: false,\r\n            showAddToClusterHelperMessage: false,\r\n            stationaryClusterItemData: null,\r\n            newClusterIds: null,\r\n            existingClusterId: null,\r\n            curClusterView: JSON.parse(localStorage.getItem(\"curClusterView\")), // Set to the cluster object if inside a cluster\r\n            showRemoveItemFromClusterMessage: false,\r\n            raiseLevelButtonHover: false,\r\n        };\r\n    };\r\n\r\n    generateVisClusterId = (cluster) => \"c\" + cluster.id;\r\n\r\n    generateClusterIdFromVisId = (visClusterId) => parseInt(visClusterId.substring(visClusterId.indexOf(\"c\") + 1));\r\n\r\n    generateVisInClusterId = (cluster, type, node) => {\r\n        let firstPart = \"c\" + cluster.id;\r\n        let secondPart;\r\n        if (type === \"item\") secondPart = \"i\" + node.id;\r\n        else if (type === \"title\") secondPart = \"t\";\r\n        else if (type === \"count\") secondPart = \"n\";\r\n        return firstPart + secondPart;\r\n    }\r\n\r\n    generateClusterIdAndNodeIdFromVisInClusterId = (visInClusterId) => {\r\n        let nodeId;\r\n        let index = visInClusterId.indexOf(\"i\");\r\n        if (index >= 0) {\r\n            nodeId = parseInt(visInClusterId.substring(index + 1));\r\n        } else {\r\n            index = visInClusterId.indexOf(\"t\");\r\n            if (index === -1) index = visInClusterId.indexOf(\"n\");\r\n        }\r\n\r\n        const clusterId = parseInt(visInClusterId.substring(visInClusterId.indexOf(\"c\") + 1, index));\r\n        return [clusterId, nodeId];\r\n    }\r\n\r\n    isItem = (id) => {\r\n        const node = this.state.visNodes.get(id);\r\n        if (node) return node.group === \"items\";\r\n        return false;\r\n    }\r\n\r\n    isCluster = (id) => {\r\n        const node = this.state.visNodes.get(id);\r\n        if (node) return node.group === \"clusters\";\r\n        return false;\r\n    }\r\n\r\n    isItemInCluster = (id) => {\r\n        const node = this.state.visNodes.get(id);\r\n        if (node) return node.group === \"inCluster\";\r\n        return false;\r\n    }\r\n\r\n    setSelectedItem = (item) => {\r\n        this.setState({selectedItem: item})\r\n    }\r\n\r\n    getSelectedItemDetails = async () => {\r\n        const endpoint = \"/items/\" + this.state.selectedItem.id;\r\n        const response = await makeHttpRequest(endpoint);\r\n        this.setSelectedItem(response.body.item);\r\n    }\r\n\r\n    setNonSelectedNodes = (id, nodes) => {\r\n        this.setState({nonSelectedNodes: nodes.getIds().filter(element => element !== id)})\r\n    }\r\n\r\n    // Check if the network is in edit mode\r\n    // isEditMode = () => {\r\n    //     const visCloseButton = document.getElementsByClassName(\"vis-close\")[0];\r\n    //     return getComputedStyle(visCloseButton).display === \"none\"\r\n    // }\r\n\r\n    // Set selected node for the detailed view\r\n    handleClickedNode = (id) => {\r\n        this.setSelectedItem(this.state.items.find(x => x.id === id));\r\n    }\r\n\r\n    handleClickedCluster = (id) => {\r\n        this.setCurClusterView(this.state.clusters.find(x => x.id === id))\r\n    }\r\n\r\n    setCurClusterView = (cluster) => {\r\n        this.setState({curClusterView: cluster})\r\n    }\r\n\r\n    handleDragStart = (nodeId, nodes, network) => {\r\n        const isCluster = this.isCluster(nodeId);\r\n        const isItemInCluster = this.isItemInCluster(nodeId);\r\n        if (isCluster || isItemInCluster) {\r\n            const numDisplayedChildNodes = 2;\r\n            let cluster, visClusterId;\r\n            if (isCluster) {\r\n                cluster = this.state.clusters.find(cluster => cluster.id === this.generateClusterIdFromVisId(nodeId));\r\n                visClusterId = nodeId;\r\n            } else {\r\n                cluster = this.state.clusters.find(cluster => cluster.id === this.generateClusterIdAndNodeIdFromVisInClusterId(nodeId)[0]);\r\n                visClusterId = this.generateVisClusterId(cluster);\r\n            }\r\n            const childNodes = cluster.child_items.slice(0, numDisplayedChildNodes);\r\n            const childNodesIds = childNodes.map(node => this.generateVisInClusterId(cluster, \"item\", node));\r\n            const clusterTitleId = this.generateVisInClusterId(cluster, \"title\");\r\n            const nodesToMove = childNodesIds.concat([visClusterId, clusterTitleId]);\r\n            // Include node count if necessary\r\n            if (cluster.child_items.length > 2) {\r\n                const clusterCountId = this.generateVisInClusterId(cluster, \"count\");\r\n                nodesToMove.push(clusterCountId);\r\n            }\r\n            network.selectNodes(nodesToMove);\r\n        } else {\r\n            this.setNonSelectedNodes(nodeId, nodes);\r\n        }\r\n    }\r\n\r\n    setLoading = (val) => {\r\n        this.setState({loading: val});\r\n    }\r\n\r\n    getItems = async (callback) => {\r\n        if (!this.props.curProject) return null;\r\n        this.setLoading(true);\r\n\r\n        if (this.props.filters.length === 0) {\r\n            this.setLoading(false);\r\n            this.setState({items: []}, callback);\r\n            return;\r\n        }\r\n\r\n        if (this.state.curClusterView === null) {\r\n            let endpoint = \"/projects/\" + this.props.curProject.id + \"/items\";\r\n\r\n            if (this.props.searchQuery !== '' && this.props.filters.length !== 0) {\r\n                endpoint = constructHttpQuery(endpoint, this.props.searchQuery, this.props.filters)\r\n            }\r\n\r\n            const response = await makeHttpRequest(endpoint);\r\n\r\n            this.setLoading(false);\r\n            this.setState({items: response.body.items}, callback);\r\n        } else {\r\n            const endpoint = \"/clusters/\" + this.state.curClusterView.id;\r\n            const response = await makeHttpRequest(endpoint);\r\n            this.setLoading(false);\r\n            this.setState({items: response.body.cluster.child_items}, callback);\r\n        }\r\n    }\r\n\r\n    getClusters = async (callback) => {\r\n        if (this.props.curProject === null) return null;\r\n        this.setLoading(true)\r\n        if (this.state.curClusterView == null) {\r\n            const endpoint = \"/projects/\" + this.props.curProject.id + \"/clusters\";\r\n            const response = await makeHttpRequest(endpoint);\r\n            this.setLoading(false);\r\n            this.setState({clusters: response.body.clusters}, callback);\r\n        } else {\r\n            const endpoint = \"/clusters/\" + this.state.curClusterView.id;\r\n            const response = await makeHttpRequest(endpoint);\r\n            const children = response.body.cluster.child_clusters.map(child => makeHttpRequest('/clusters/' + child));\r\n            Promise.all(children).then(values => {\r\n                this.setLoading(false);\r\n                this.setState({clusters: values.map(child => child.body.cluster)}, callback);\r\n            })\r\n        }\r\n    }\r\n\r\n    updateItemPosition = (itemId, x, y) => {\r\n        const endpoint = \"/items/\" + itemId;\r\n        const body = {\r\n            \"x_position\": x,\r\n            \"y_position\": y\r\n        }\r\n        makeHttpRequest(endpoint, \"PATCH\", body).then();\r\n    }\r\n\r\n    updateClusterPosition = (clusterId, x, y) => {\r\n        const endpoint = \"/clusters/\" + clusterId;\r\n        const body = {\r\n            \"x\": x,\r\n            \"y\": y\r\n        }\r\n        makeHttpRequest(endpoint, \"PATCH\", body).then();\r\n    }\r\n\r\n    fitNetworkToScreen = () => {\r\n        if (this.state.network !== null) {\r\n            this.state.network.fit()\r\n        }\r\n    }\r\n\r\n    disableEditMode = () => {\r\n        this.setShowNewItemHelperMessage(false);\r\n        this.setShowNewClusterHelperMessage(false);\r\n        if (this.state.network) this.state.network.disableEditMode()\r\n    }\r\n\r\n    switchShowNewItemForm = () => {\r\n        this.setState({showNewItemForm: !this.state.showNewItemForm}, () => {\r\n            // Get out of edit mode if necessary\r\n            if (!this.state.showNewItemForm) {\r\n                this.disableEditMode()\r\n            }\r\n        });\r\n    }\r\n\r\n    switchShowNewClusterForm = () => {\r\n        this.setState({showNewClusterForm: !this.state.showNewClusterForm}, () => {\r\n            // Get out of edit mode if necessary\r\n            if (!this.state.showNewClusterForm) {\r\n                this.disableEditMode()\r\n            }\r\n        });\r\n    }\r\n\r\n    setShowNewItemHelperMessage = (val) => {\r\n        this.setState({showNewItemHelperMessage: val});\r\n    }\r\n\r\n    addItem = (nodeData, callback) => {\r\n        this.switchShowNewItemForm();\r\n        this.setShowNewItemHelperMessage(false);\r\n        this.setState({\r\n            newItemData: nodeData\r\n        });\r\n    }\r\n\r\n    setShowNewClusterHelperMessage = (val) => {\r\n        this.setState({showNewClusterHelperMessage: val});\r\n    }\r\n\r\n    setShowAddToClusterHelperMessage = (val) => {\r\n        this.setState({showAddToClusterHelperMessage: val});\r\n    }\r\n\r\n    setAddItemMode = (newItemFormType, item = null) => {\r\n        this.setState({\r\n            newItemFormType: newItemFormType,\r\n            item: item\r\n        });\r\n        this.setShowNewItemHelperMessage(true);\r\n        if (this.state.network) this.state.network.addNodeMode();\r\n    }\r\n\r\n    addItemToCluster = (clusterId, itemId) => {\r\n        this.setLoading(true);\r\n        const endpoint = \"/clusters/\" + clusterId + \"/items/\" + itemId;\r\n        makeHttpRequest(endpoint, \"POST\").then(response => {\r\n            this.setLoading(false);\r\n            if (response.body.success) Alert.success(\"This item was successfully added\");\r\n            else Alert.error(\"This item could not be added\");\r\n            this.renderNetwork();\r\n        });\r\n\r\n    }\r\n\r\n    moveItemFromClusterToHigherLevel = (itemId, clusterId) => {\r\n        this.setLoading(true);\r\n        const endpoint = \"/clusters/\" + clusterId + \"/items/\" + itemId;\r\n        makeHttpRequest(endpoint, \"DELETE\").then(response => {\r\n            this.setLoading(false);\r\n            if (response.body.success) Alert.success(\"The item was successfully moved\");\r\n            else Alert.error(\"This item could not be moved\");\r\n            this.renderNetwork();\r\n        });\r\n    }\r\n\r\n    /* Helper function to generate position for nodes\r\n    This function adds an offset to  the randomly generated position based on the\r\n    position of the node's parent (if it has one)\r\n     */\r\n    generateNodePositions(node) {\r\n        let xOffset = 0;\r\n        let yOffset = 0;\r\n        // // Update the offset if the node has a parent\r\n        // if (node.prev_sources.length !== 0) {\r\n        //     const prevId = node.prev_sources[0];\r\n        //     const prevNode = this.state.items.find(x => x.id === prevId);\r\n        //     // Check if the previous node has defined coordinates\r\n        //     if (prevNode.x_position !== null && prevNode.y_position !== null) {\r\n        //         xOffset = prevNode.x_position;\r\n        //         yOffset = prevNode.y_position;\r\n        //     }\r\n        // }\r\n        // Helper variable to generate random positions\r\n        const rangeLimit = 300; // To generate positions in the interval [-rangeLimit, rangeLimit]\r\n        // Generate random positions\r\n        const xRandom = Math.floor(Math.random() * 2 * rangeLimit - rangeLimit);\r\n        const yRandom = Math.floor(Math.random() * 2 * rangeLimit - rangeLimit);\r\n\r\n        // Return positions with offset\r\n        return [xRandom + xOffset, yRandom + yOffset];\r\n    }\r\n\r\n    getNodeType = (node) => {\r\n        if (!node) return this.state.types.NULL;\r\n        //pure note\r\n        if (!node.url) return this.state.types.PURENOTE;\r\n        //source and note\r\n        if (node.url && node.is_note && node.content) return this.state.types.SOURCEANDNOTE;\r\n        //source and highlight\r\n        if (node.url && !node.is_note && node.content) return this.state.types.SOURCEANDHIGHLIGHT;\r\n        //pure source\r\n        if (node.url && !node.content) return this.state.types.PURESOURCE;\r\n    }\r\n\r\n    getNodeLabel = (node, nodeType) => {\r\n        const types = this.state.types;\r\n        const contentLength = 100;\r\n        let nodeContent;\r\n        if (node.content) {\r\n            nodeContent = node.content;\r\n            if (nodeContent.length > contentLength) nodeContent = nodeContent.substring(0, contentLength) + \"...\";\r\n        }\r\n        if (nodeType === types.PURESOURCE)\r\n            return node.title;\r\n        if (nodeType === types.SOURCEANDNOTE || nodeType === types.SOURCEANDHIGHLIGHT)\r\n            return node.title + \"\\n\" + nodeContent;\r\n        if (nodeType === types.PURENOTE)\r\n            return nodeContent;\r\n    }\r\n\r\n    getNodePosition = (node) => {\r\n        let x = node.x_position;\r\n        let y = node.y_position;\r\n        if (x === null || y === null) {\r\n            // If position is still undefined, generate random x and y in interval [-300, 300]\r\n            [x, y] = this.generateNodePositions(node);\r\n            this.updateItemPosition(node.id, x, y);\r\n        }\r\n        return [x, y];\r\n    }\r\n\r\n    // Helper function to setup the nodes for the graph\r\n    createNodes() {\r\n        let nodes = new DataSet();\r\n\r\n        // Iterate through each node in the graph and build the arrays of nodes\r\n        for (let index in this.state.items) {\r\n            if (this.state.clusters.length === 0 || this.state.clusters.filter(cluster => cluster.project_id === this.props.curProject.id)\r\n                .filter(cluster => cluster.child_items.some(e => e.id === this.state.items[index].id)).length === 0) {\r\n                const node = this.state.items[index];\r\n                const nodeType = this.getNodeType(node);\r\n                const label = this.getNodeLabel(node, nodeType);\r\n                const [x, y] = this.getNodePosition(node);\r\n                nodes.add({group: \"items\", id: node.id, label: label, x: x, y: y, color: this.getColor(node)});\r\n            }\r\n        }\r\n        this.setState({visNodes: nodes});\r\n        return nodes;\r\n    }\r\n\r\n    getColor = (item) => {\r\n        const nodeType = this.getNodeType(item);\r\n        return this.state.nodeColors[nodeType];\r\n    }\r\n\r\n    createClusters() {\r\n        let clusterNodes = new DataSet();\r\n        if (this.state.clusters.length === 0) {\r\n            return clusterNodes;\r\n        }\r\n        // let projectClusters = this.state.clusters.filter(\r\n        //         cluster => (cluster.project_id === this.props.curProject.id))\r\n        let projectClusters = this.state.clusters;\r\n        projectClusters.forEach(cluster => {\r\n            clusterNodes.add({\r\n                group: \"clusters\",\r\n                id: this.generateVisClusterId(cluster),\r\n                label: '-----------------------------------------------------', // :(\r\n                x: cluster.x_position,\r\n                y: cluster.y_position\r\n            });\r\n            // Add node to serve as cluster title\r\n            const helperDataOffset = 120;\r\n            clusterNodes.add({\r\n                group: \"inCluster\",\r\n                id: this.generateVisInClusterId(cluster, \"title\"),\r\n                label: cluster.name,\r\n                x: cluster.x_position,\r\n                y: cluster.y_position - helperDataOffset,\r\n                font: {\r\n                    color: \"black\",\r\n                    size: 18\r\n                },\r\n                color: {\r\n                    background: \"#ffffff\",\r\n                    border: \"#00c0de\"\r\n                }\r\n            })\r\n            if (cluster.total_items > 2) {\r\n                const totalNodes = cluster.total_items - 2;\r\n                clusterNodes.add({\r\n                    group: \"inCluster\",\r\n                    id: this.generateVisInClusterId(cluster, \"count\"),\r\n                    label: \"+\" + totalNodes + \" item\" + (totalNodes > 1 ? \"s\" : \"\"),\r\n                    x: cluster.x_position,\r\n                    y: cluster.y_position + helperDataOffset,\r\n                    font: {\r\n                        color: \"black\",\r\n                        size: 18\r\n                    },\r\n                    color: {\r\n                        background: \"rgba(0, 0, 0, 0)\",\r\n                        border: \"rgba(0, 0, 0, 0)\"\r\n                    }\r\n                })\r\n            }\r\n            let count = 0;\r\n            cluster.child_items.forEach(child => {\r\n                const nodeType = this.getNodeType(child);\r\n                const label = this.getNodeLabel(child, nodeType);\r\n                let yOffset = -40;\r\n                if (count === 1) {\r\n                    yOffset = 40;\r\n                }\r\n                if (count > 1) return;\r\n\r\n                clusterNodes.add({\r\n                    group: 'inCluster',\r\n                    id: this.generateVisInClusterId(cluster, \"item\", child),\r\n                    label: label,\r\n                    x: cluster.x_position,\r\n                    y: cluster.y_position + yOffset,\r\n                    widthConstraint: {\r\n                        maximum: 170\r\n                    },\r\n                    color: this.getColor(child)\r\n                })\r\n                count++;\r\n            })\r\n        })\r\n        return clusterNodes\r\n    }\r\n\r\n    renderNetwork = (callback) => {\r\n        if (this.props.curProject === null) return;\r\n\r\n        this.getItems(() => {\r\n            this.getClusters(() => {\r\n                let nodes = this.createNodes();\r\n                const clusterNodes = this.createClusters();\r\n                clusterNodes.forEach(cluster => {\r\n                    nodes.add(cluster)\r\n                })\r\n\r\n                // create a network\r\n                const container = document.getElementById('mindmap');\r\n\r\n                // provide the data in the vis format\r\n                const data = {\r\n                    nodes: nodes\r\n                };\r\n\r\n                const options = {\r\n                    groups: {\r\n                        clusters: {\r\n                            chosen: {\r\n                                label: (values, id, selected, hovering) => {\r\n                                    values.color = '#ffffff00';\r\n                                },\r\n                                node: (values, id, selected, hovering) => {\r\n                                    values.color = '#ffffff00';\r\n                                }\r\n                            },\r\n                            shape: 'circle',\r\n                            font: {\r\n                                face: \"Apple-System\",\r\n                                color: \"#ffffff00\"\r\n                            },\r\n                            color: {\r\n                                border: \"#00c0de\",\r\n                                background: '#ffffff00'\r\n                            },\r\n                            physics: false\r\n                        },\r\n                        items: {\r\n                            shape: \"box\",\r\n                            size: 16,\r\n                            margin: 10,\r\n                            physics: false,\r\n                            chosen: false,\r\n                            font: {\r\n                                face: \"Apple-System\",\r\n                                color: \"white\"\r\n                            },\r\n                            widthConstraint: {\r\n                                maximum: 500\r\n                            }\r\n                        },\r\n                        inCluster: {\r\n                            shape: \"box\",\r\n                            size: 16,\r\n                            margin: 10,\r\n                            physics: false,\r\n                            chosen: false,\r\n                            font: {\r\n                                face: \"Apple-System\",\r\n                                color: \"white\"\r\n                            },\r\n                            widthConstraint: {\r\n                                maximum: 500\r\n                            }\r\n                        }\r\n                    },\r\n                    interaction: {\r\n                        selectConnectedEdges: false,\r\n                        hover: true,\r\n                        hoverConnectedEdges: false\r\n                    },\r\n                    manipulation: {\r\n                        enabled: false,\r\n                        addNode: this.addItem\r\n                    }\r\n                };\r\n\r\n                // Initialize the network\r\n                const network = new Network(container, data, options);\r\n                network.fit();\r\n\r\n                // Handle click vs drag\r\n                network.on(\"click\", (params) => {\r\n                    if (params.nodes !== undefined && params.nodes.length > 0) {\r\n                        const nodeId = params.nodes[0];\r\n                        if (this.isItem(nodeId)) {\r\n                            this.handleClickedNode(nodeId);\r\n                        } else if (this.isCluster(nodeId) || this.isItemInCluster(nodeId)) {\r\n                            let clusterId;\r\n                            if (this.isItemInCluster(nodeId)) {\r\n                                clusterId = this.generateClusterIdAndNodeIdFromVisInClusterId(nodeId)[0];\r\n                            } else {\r\n                                clusterId = this.generateClusterIdFromVisId(nodeId);\r\n                            }\r\n                            this.handleClickedCluster(clusterId)\r\n                        }\r\n                    }\r\n                });\r\n\r\n                network.on(\"dragStart\", (params) => {\r\n                    if (params.nodes !== undefined && params.nodes.length > 0) {\r\n                        const nodeId = params.nodes[0];\r\n                        this.handleDragStart(nodeId, nodes, network);\r\n                    }\r\n                });\r\n\r\n                let dt = 100 //ms\r\n                network.on(\"dragging\", throttle((params) => {\r\n                    if (params.nodes !== undefined && params.nodes.length > 0) {\r\n                        const id = network.getSelectedNodes()[0];\r\n                        if (this.isItem(id)) {\r\n                            const boundingBox = network.getBoundingBox(id);\r\n                            let otherNodes = this.state.nonSelectedNodes;\r\n                            if ((!this.state.showNewClusterHelperMessage && !this.state.showAddToClusterHelperMessage)\r\n                                 && otherNodes.length >= 1) {\r\n                                otherNodes.forEach(node => {\r\n                                    if (isOverlap(network.getBoundingBox(node), boundingBox)) {\r\n                                        if (this.isItem(node)) {\r\n                                            this.setState({stationaryClusterItemData: network.getPosition(node)})\r\n                                            this.setState({newClusterIds: {\"item1\": id, \"item2\": node}})\r\n                                            this.setShowNewClusterHelperMessage(true)\r\n                                        } else if (this.isCluster(node)) {\r\n                                            this.setState({existingClusterId: node})\r\n                                            this.setShowAddToClusterHelperMessage(true)\r\n                                        }\r\n                                    }\r\n                                });\r\n                                if (this.state.curClusterView && this.state.raiseLevelButtonHover) {\r\n                                    this.setState({showRemoveItemFromClusterMessage: true});\r\n                                } else if (this.state.curClusterView && !this.state.raiseLevelButtonHover) {\r\n                                    this.setState({showRemoveItemFromClusterMessage: false});\r\n                                }\r\n                            } else {\r\n                                if (this.state.newClusterIds && !isOverlap(boundingBox, network.getBoundingBox(this.state.newClusterIds.item2))) {\r\n                                    this.setShowNewClusterHelperMessage(false)\r\n                                }\r\n                                if (this.state.existingClusterId && !isOverlap(boundingBox, network.getBoundingBox(this.state.existingClusterId))) {\r\n                                    this.setShowAddToClusterHelperMessage(false)\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }, dt));\r\n\r\n                // Update positions after dragging node\r\n                network.on(\"dragEnd\", (eventData) => {\r\n                    // Only update positions if there is a selected node\r\n                    if (network.getSelectedNodes().length !== 0) {\r\n                        if (this.state.showNewClusterHelperMessage) {\r\n                            this.setState({showNewClusterForm: true})\r\n                        } else if (this.state.showAddToClusterHelperMessage) {\r\n                            // Add item to existing cluster\r\n                            const existingCluster = this.state.existingClusterId;\r\n                            const id = this.generateClusterIdFromVisId(existingCluster);\r\n                            this.addItemToCluster(id, network.getSelectedNodes()[0]);\r\n                            this.setShowAddToClusterHelperMessage(false);\r\n                            this.renderNetwork();\r\n                        } else if (this.state.showRemoveItemFromClusterMessage && this.state.raiseLevelButtonHover) {\r\n                            this.moveItemFromClusterToHigherLevel(network.getSelectedNodes()[0], this.state.curClusterView.id);\r\n                            this.setState({showRemoveItemFromClusterMessage: false});\r\n                            this.renderNetwork();\r\n                        } else {\r\n                            // Update position of item or cluster\r\n                            const id = network.getSelectedNodes()[0];\r\n                            const position = network.getPosition(id);\r\n                            const x = position.x;\r\n                            const y = position.y;\r\n                            if (this.isItem(id)) {\r\n                                this.updateItemPosition(id, x, y);\r\n                            } else if (this.isCluster(id) || this.isItemInCluster(id)) {\r\n                                let clusterId;\r\n                                if (this.isCluster(id)) clusterId = this.generateClusterIdFromVisId(id);\r\n                                else [clusterId,] = this.generateClusterIdAndNodeIdFromVisInClusterId(id);\r\n                                this.updateClusterPosition(clusterId, x, y);\r\n                            }\r\n                        }\r\n                    }\r\n                });\r\n\r\n                // Set cursor to pointer when hovering over a node\r\n                network.on(\"hoverNode\", () => network.canvas.body.container.style.cursor = \"pointer\");\r\n                network.on(\"blurNode\", () => network.canvas.body.container.style.cursor = \"default\");\r\n\r\n                // Store the network\r\n                this.setState({network: network}, callback);\r\n            })\r\n        })\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (prevProps.curProject !== this.props.curProject) {\r\n            // Set items to null before updating to show loading icon\r\n            this.setState({items: null}, this.renderNetwork);\r\n            this.setCurClusterView(null);\r\n        }\r\n\r\n        if (prevState.showNewItemHelperMessage !== this.state.showNewItemHelperMessage) {\r\n            if (this.state.showNewItemHelperMessage) {\r\n                Alert.info(\"Click on an empty space to add your new item.\",\r\n                    0, this.disableEditMode);\r\n            } else {\r\n                Alert.close();\r\n            }\r\n        }\r\n\r\n        if (prevProps.searchQuery !== this.props.searchQuery || prevProps.filters !== this.props.filters) {\r\n            this.renderNetwork(null);\r\n        }\r\n\r\n        if (prevState.showNewClusterHelperMessage !== this.state.showNewClusterHelperMessage) {\r\n            if (this.state.showNewClusterHelperMessage) {\r\n                Alert.info(\"Release to create new cluster.\",\r\n                    0, this.disableEditMode);\r\n            } else {\r\n                Alert.close();\r\n            }\r\n        }\r\n\r\n        if (prevState.showAddToClusterHelperMessage !== this.state.showAddToClusterHelperMessage) {\r\n            if (this.state.showAddToClusterHelperMessage) {\r\n                Alert.info(\"Release to add to cluster.\",\r\n                    0, this.disableEditMode);\r\n            } else {\r\n                Alert.close();\r\n            }\r\n        }\r\n\r\n        if (prevState.showRemoveItemFromClusterMessage !== this.state.showRemoveItemFromClusterMessage) {\r\n            if (this.state.showRemoveItemFromClusterMessage) {\r\n                Alert.info(\"Release to move node to previous level.\",\r\n                    0, this.disableEditMode);\r\n            } else {\r\n                Alert.close();\r\n            }\r\n        }\r\n\r\n        if (prevState.showNewClusterForm !== this.state.showNewClusterForm) {\r\n            if (this.state.showNewClusterForm) {\r\n                Alert.close()\r\n            }\r\n        }\r\n\r\n        if (prevState.curClusterView !== this.state.curClusterView) {\r\n            localStorage.setItem(\"curClusterView\", JSON.stringify(this.state.curClusterView));\r\n            // Set items and clusters to null to trigger loading spinner\r\n            this.setState({items: null, clusters: null}, this.renderNetwork);\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.state.curClusterView === null) {\r\n            localStorage.setItem(\"curClusterView\", JSON.stringify(null))\r\n        }\r\n        this.renderNetwork();\r\n    }\r\n\r\n    render() {\r\n        if (this.props.curProject === null || (this.state.loading && (this.state.items === null || this.state.clusters === null))) {\r\n            return <Loader size=\"lg\" backdrop center/>\r\n        }\r\n\r\n        return (\r\n            <div style={{position:\"relative\", height:\"93.5%\"}}>\r\n                <div id=\"mindmap\"/>\r\n                <Minigames\r\n                    curProject={this.props.curProject}\r\n                    items={this.state.items}\r\n                    color={this.getColor}\r\n                    network={this.state.network}/>\r\n                <ItemView selectedItem={this.state.selectedItem}\r\n                          setSelectedItem={this.setSelectedItem}\r\n                          getSelectedItemDetails={this.getSelectedItemDetails}\r\n                          renderNetwork={this.renderNetwork}\r\n                          setAddItemMode={this.setAddItemMode}\r\n                          getNodeType={this.getNodeType}\r\n                          nodeTypes={this.state.types}/>\r\n                <NewItemForm showNewItemForm={this.state.showNewItemForm}\r\n                             curProject={this.props.curProject}\r\n                             renderNetwork={this.renderNetwork}\r\n                             switchShowNewItemForm={this.switchShowNewItemForm}\r\n                             inputType={this.state.newItemFormType}\r\n                             newItemData={this.state.newItemData}\r\n                             item={this.state.item}\r\n                             parentCluster={this.state.curClusterView}/>\r\n                <NewClusterForm showNewClusterForm={this.state.showNewClusterForm}\r\n                                stationaryClusterItemData={this.state.stationaryClusterItemData}\r\n                                curProject={this.props.curProject}\r\n                                renderNetwork={this.renderNetwork}\r\n                                newClusterIds={this.state.newClusterIds}\r\n                                switchShowNewClusterForm={this.switchShowNewClusterForm}\r\n                                disableEditMode={this.disableEditMode}/>\r\n                <BibWindow showBib={this.props.showBib} setShowBib={this.props.setShowBib}\r\n                           curProject={this.props.curProject}\r\n                           curCluster={this.state.curClusterView} />\r\n                <SharedProject showSharedProject={this.props.showSharedProject}\r\n                               setShowSharedProject={this.props.setShowSharedProject}\r\n                               curProject={this.props.curProject} updateProjects={this.props.updateProjects}/>\r\n                <ClusterTitle curClusterView={this.state.curClusterView} setCurClusterView={this.setCurClusterView}/>\r\n                <div onMouseOver={() => this.setState({raiseLevelButtonHover: true})}\r\n                     onMouseOut={() => this.setState({raiseLevelButtonHover: false})}>\r\n                        <RaiseLevelButton curClusterView={this.state.curClusterView}\r\n                                  setCurClusterView={this.setCurClusterView} />\r\n                </div>\r\n                <AppFooter fit={this.fitNetworkToScreen} setAddItemMode={this.setAddItemMode}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MindMap;","export default function throttle(func, ms) {\r\n    let lastFunc\r\n    let lastRan\r\n    return function () {\r\n        const context = this\r\n        const args = arguments\r\n        if (!lastRan) {\r\n            func.apply(context, args)\r\n            lastRan = Date.now()\r\n        } else {\r\n            clearTimeout(lastFunc)\r\n            lastFunc = setTimeout(function () {\r\n                if ((Date.now() - lastRan) >= ms) {\r\n                    func.apply(context, args)\r\n                    lastRan = Date.now()\r\n                }\r\n            }, ms - (Date.now() - lastRan))\r\n        }\r\n    }\r\n}","// Import from npm libraries\r\nimport React from 'react';\r\nimport {Button, Loader} from 'rsuite';\r\nimport {withAuthenticationRequired} from \"@auth0/auth0-react\";\r\n\r\n// Import React Components\r\nimport AppHeader from \"./AppHeader\";\r\nimport ProjectsSidebar from \"./ProjectsSidebar\";\r\nimport MindMap from \"./MindMap\";\r\nimport NewProjectModal from \"../components/NewProjectModal\";\r\n\r\n// Import utilities\r\nimport makeHttpRequest from \"../services/HttpRequest\";\r\n\r\n// Import styles\r\nimport 'rsuite/dist/styles/rsuite-default.css';\r\nimport '../index.css';\r\n\r\n\r\nclass App extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        const curProjectKey = process.env.REACT_APP_LOCAL_STORAGE_CUR_PROJECT;\r\n        this.state = {\r\n            curProjectKey: curProjectKey,\r\n            curProject: JSON.parse(localStorage.getItem(curProjectKey)),\r\n            projects: null,\r\n            showProjectsSidebar: false,\r\n            showBib: false,\r\n            showSharedProject: false,\r\n            showNewProjectModal: false,\r\n            searchQuery: '',\r\n            filters: [\"Title\",\r\n                \"URL\",\r\n                \"Page Content\",\r\n                \"Highlights\",\r\n                \"Notes\"]\r\n        }\r\n    }\r\n\r\n    updateProjects = (callback) => {\r\n        makeHttpRequest(\"/projects\").then(response => {\r\n            if (!response.body.success) {\r\n                this.setShowNewProjectModal(true);\r\n            }\r\n\r\n            const projects = response.body.projects;\r\n            this.setState({projects: projects}, () => {\r\n                // Update current project\r\n                if (this.state.curProject) {\r\n                    this.setCurProject(this.state.curProject.id);\r\n                } else if (projects && projects.length > 0) {\r\n                    this.setState({curProject: projects[0]});\r\n                } else if (!projects || projects.length === 0) {\r\n                    this.setCurProject(null);\r\n                    this.setShowNewProjectModal(true);\r\n                }\r\n\r\n                if (typeof callback === \"function\") {\r\n                    callback();\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n    switchShowProjectsSidebar = () => {\r\n        this.setState({showProjectsSidebar: !this.state.showProjectsSidebar});\r\n    }\r\n\r\n    setCurProject = (projectId) => {\r\n        if (projectId === null) this.setState({curProject: null})\r\n        else {\r\n            const project = this.state.projects.find(x => x.id === projectId);\r\n            this.setState({curProject: project});\r\n        }\r\n    }\r\n\r\n    projectsButton = () => {\r\n        return (\r\n            <Button appearance=\"primary\" id=\"projects-sidebar-btn\" onClick={this.switchShowProjectsSidebar}>\r\n                Your<br/>Projects\r\n            </Button>\r\n        );\r\n    }\r\n\r\n    setShowBib = (clicked) => {\r\n        // Keeps track if Bibliography Generation Button clicked and Window should open\r\n        this.setState({\r\n            showBib: clicked\r\n        });\r\n    }\r\n\r\n    setShowNewProjectModal = (val) => {\r\n        this.setState({showNewProjectModal: val})\r\n    }\r\n\r\n    setSearchQuery = (searchQuery) => {\r\n        this.setState({searchQuery});\r\n        if (this.props.onInput) {\r\n            this.props.onInput({searchQuery})\r\n        }\r\n    }\r\n\r\n    updateFilters = (filters) => {\r\n        this.setState({filters});\r\n    }\r\n\r\n\r\n    setShowSharedProject = (val) => {\r\n        this.setState({showSharedProject: val})\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.updateProjects()\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        // Update localstorage whenever the curProject changes\r\n        if (prevState.curProject !== this.state.curProject) {\r\n            const callback = () => localStorage.setItem(this.state.curProjectKey, JSON.stringify(this.state.curProject));\r\n            if (!this.state.curProject) {\r\n                let curProject = null;\r\n                if (this.state.projects && this.state.projects.length > 0) {\r\n                    curProject = this.state.projects[0];\r\n                } else {\r\n                    this.setShowNewProjectModal(true);\r\n                }\r\n                this.setState({curProject: curProject}, callback);\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div style={{height: \"100%\"}}>\r\n                <AppHeader curProject={this.state.curProject} setShowBib={this.setShowBib}\r\n                           searchQuery={this.state.searchQuery}\r\n                           setSearchQuery={this.setSearchQuery} updateFilters={this.updateFilters}/>\r\n                <ProjectsSidebar show={this.state.showProjectsSidebar} curProject={this.state.curProject}\r\n                                 projects={this.state.projects} setShowSharedProject={this.setShowSharedProject}\r\n                                 close={this.switchShowProjectsSidebar} updateProjects={this.updateProjects}\r\n                                 setCurProject={this.setCurProject}/>\r\n                {this.projectsButton()}\r\n                <MindMap curProject={this.state.curProject} showBib={this.state.showBib}\r\n                         setShowBib={this.setShowBib} searchQuery={this.state.searchQuery}\r\n                         filters={this.state.filters} setShowSharedProject={this.setShowSharedProject}\r\n                         showSharedProject={this.state.showSharedProject}\r\n                         updateProjects={this.updateProjects}/>\r\n                <NewProjectModal show={this.state.showNewProjectModal} setShow={this.setShowNewProjectModal}\r\n                                 noCancel fromSidebar/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withAuthenticationRequired(App, {\r\n    onRedirecting: () => <Loader size=\"lg\" backdrop center/>,\r\n});","import React from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { Auth0Provider } from \"@auth0/auth0-react\";\r\n\r\nconst KnolistAuthProvider = ({ children }) => {\r\n  const domain = 'knolist.us.auth0.com';\r\n  const clientId = 'pBu5uP4mKTQgBttTW13N0wCVgsx90KMi';\r\n  const audience = 'knolist';\r\n\r\n  const history = useHistory();\r\n\r\n  const onRedirectCallback = (appState) => {\r\n    history.push(appState?.returnTo || window.location.pathname);\r\n  };\r\n\r\n  return (\r\n    <Auth0Provider\r\n      domain={domain}\r\n      clientId={clientId}\r\n      redirectUri={window.location.origin}\r\n      onRedirectCallback={onRedirectCallback}\r\n      audience={audience}\r\n    >\r\n      {children}\r\n    </Auth0Provider>\r\n  );\r\n};\r\n\r\nexport default KnolistAuthProvider;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter as Router } from 'react-router-dom';\r\nimport { Route, Switch } from \"react-router\";\r\nimport Page from \"./my-knolist/Page.js\";\r\nimport Settings from \"./my-knolist/Settings.js\";\r\n\r\nimport App from './app/App.js';\r\nimport KnolistAuthProvider from \"./authentication/auth-provider\";\r\n\r\nReactDOM.render(\r\n    <div style={{position:\"absolute\", bottom:0, top:0, width:\"100%\"}}>\r\n    <Router>\r\n        <Switch>\r\n            <KnolistAuthProvider>\r\n                <Route exact path=\"/\">\r\n                    <App />\r\n                </Route>\r\n                <Route path=\"/my-projects\">\r\n                    <Page url={\"/my-projects\"} />\r\n                </Route>\r\n                <Route path=\"/shared\">\r\n                    <Page url={\"/shared\"} />\r\n                </Route>\r\n                <Route path=\"/archived\">\r\n                    <Page url={\"/archived\"} />\r\n                </Route>\r\n                <Route path=\"/settings\">\r\n                    <Settings />\r\n                </Route>\r\n            </KnolistAuthProvider>\r\n        </Switch>\r\n    </Router>\r\n    </div>,\r\n    document.getElementById('root')\r\n);"],"sourceRoot":""}